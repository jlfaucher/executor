================================================================================
Notes Case folding/lowercase/uppercase
================================================================================
https://github.com/uni-algo/uni-algo/issues/29#issuecomment-1627809027

Case folding/lowercase/uppercase views are not implemented at the moment.
They are planned and will be implemented the same as normalization views.
Right now you can do it manually through properties uni_algo/prop.h like this:

    std::string str8 = "StraÃŸe";
    auto view = una::ranges::utf8_view{str8};

    for (auto it = view.begin(); it != view.end(); ++it)
    {
        std::u32string s = una::codepoint::to_casefold_u32(*it); // Full case folding
        char32_t c = una::codepoint::to_simple_casefold(*it); // Simple case folding
    }


================================================================================
Notes canonical caseless match
================================================================================

https://github.com/uni-algo/uni-algo/discussions/30#discussioncomment-6452682
Q:
In your library, you have una::caseless::compare_utf8, which is described as "case insensitive".
Is this the same as a canonical caseless match?

A:
No, it's not the same. The Unicode Standard describes canonical caseless match like this:
A string X is a canonical caseless match for a string Y if and only if:
    NFD(toCasefold(NFD(X))) = NFD(toCasefold(NFD(Y)))
So it will look like this with the library:
    bool canonical_caseless_match(std::string_view str1, std::string_view str2)
    {
        return una::norm::to_nfd_utf8(una::cases::to_casefold_utf8(una::norm::to_nfd_utf8(str1)))
               ==
               una::norm::to_nfd_utf8(una::cases::to_casefold_utf8(una::norm::to_nfd_utf8(str2)));
    }
Of course the performance of this won't be that great. Technically it's possible
to implement it better with views but the problem right now the library doesn't
have case folding view (it's planned). So you need to implement it manually with
una::codepoint::to_casefold_u32 function from uni_algo/prop.h.
If you want to try it then as a starting point you can use canonical_equivalence
function in example/cpp_ranges.h. But it won't be easy for sure, you probably
need to implement you own case folding view first because the algorithm requires
case folding to be between 2 NFDs.


================================================================================
uni_algo/config.h
================================================================================

// C++20 or higher and header-only version is required for constexpr library
#if defined(UNI_ALGO_STATIC_DATA) && (__cplusplus >= 202002L || _MSVC_LANG >= 202002L)
// NOTE: This include is needed for __cpp_lib_constexpr_string below
#include <version>
#if (__cpp_constexpr >= 201907L) && defined(__cpp_lib_constexpr_string) \
    && !(defined(__clang__) && defined(__GLIBCXX__)) // constexpr standard lib is broken in Clang with libstdc++
#define UNI_ALGO_CONSTEXPR
#define uaiw_constexpr constexpr
#endif
#endif
#ifndef UNI_ALGO_CONSTEXPR
#define uaiw_constexpr
#endif

================================================================================
uni_algo/case.h
================================================================================

namespace cases {

template<typename UTF8, typename Alloc = std::allocator<UTF8>>
uaiw_constexpr std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>
to_lowercase_utf8(std::basic_string_view<UTF8> source, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_map<std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>, Alloc, std::basic_string_view<UTF8>,
            detail::impl_x_case_map_utf8, detail::impl_case_map_loc_utf8>(alloc, source,
            detail::impl_case_map_mode_lowercase);
}

inline uaiw_constexpr std::string to_lowercase_utf8(std::string_view source)
{
    return to_lowercase_utf8<char>(source);
}


return
detail::t_map<
                std::basic_string<
                                   UTF8,
                                   std::char_traits<UTF8>,
                                   Alloc
                                 >,
                Alloc,
                std::basic_string_view<UTF8>,
                detail::impl_x_case_map_utf8,                     // 3
                detail::impl_case_map_locale_utf8                 // method
             >(alloc,
               source,
               detail::impl_case_map_mode_lowercase, static_cast<char32_t>(locale.get_language())
              );

--------------------------------------------------------------------------------

#ifndef UNI_ALGO_DISABLE_FULL_CASE
template<typename UTF8, typename Alloc = std::allocator<UTF8>>
uaiw_constexpr std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>
to_lowercase_utf8(std::basic_string_view<UTF8> source, const una::locale& locale, const Alloc& alloc = Alloc())
{
    static_assert(std::is_integral_v<UTF8>);

    return detail::t_map<std::basic_string<UTF8, std::char_traits<UTF8>, Alloc>, Alloc, std::basic_string_view<UTF8>,
            detail::impl_x_case_map_utf8, detail::impl_case_map_locale_utf8>(alloc, source,
            detail::impl_case_map_mode_lowercase, static_cast<char32_t>(locale.get_language()));
}


inline uaiw_constexpr std::string to_lowercase_utf8(std::string_view source, const una::locale& locale)
{
    return to_lowercase_utf8<char>(source, locale);
}


--------------------------------------------------------------------------------

namespace cases {

inline uaiw_constexpr std::u8string to_lowercase_utf8(std::u8string_view source)
{
    return to_lowercase_utf8<char8_t>(source);
}


inline uaiw_constexpr std::u8string to_lowercase_utf8(std::u8string_view source, const una::locale& locale)
{
    return to_lowercase_utf8<char8_t>(source, locale);
}
