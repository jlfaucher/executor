system cdoorexx
prompt directory off
demo on

----------------
-- Text encoding
----------------

/*
Start working on a prototype for encoded strings.

Main ideas explored with this prototype :
- No automatic conversion to Unicode by the interpreter.
- The strings crossing the I/O barriers are kept unchanged.
- Supported encodings : byte, UTF-8, UTF-16BE.
- When no encoding has been explicitely specified, a default encoding is used.
- Initially, the default encoding is "UTF8". It can be changed at anytime.
*/
sleep no prompt

/*
- ABANDONNED: A string is made of slices, where each slice has its own encoding.
- ABANDONNED: Strings with different encodings can be concatenated, there is no need of conversion.
- NEW: Strings with different encodings can be concatenated if their encodings are compatible.
       Example: a byte-encoded string containing only ASCII characters is compatible with UTF-8.
       If not compatible then an error is raised.
- The existing String class is kept unchanged, but its semantic becomes : "byte-oriented".
- The prototype adds a layer of services working at grapheme level, provided by the RexxText class.
- The RexxText class works on the bytes managed by the String class.
- String instances are immutable, the same for RexxText instances.
*/
sleep no prompt

/*
On my Mac, where locale returns :
*/
sleep
"locale"
sleep no prompt

/*
I get that under ooRexxShell :
*/
s1 = "é"
s1=                                 -- 'é'
s1~length=                          -- 2
s1~c2x=                             -- C3 A9
combining_acute_accent = "cc81"x
s2 = "e" || combining_acute_accent
s2=                                 -- 'é'
s2~length=                          -- 3
s2~c2x=                             -- 65 CC 81
sleep no prompt

/*
My goal :
s1~text~length=                     -- 1 grapheme
s1~text~codepoints~size=            -- 1 codepoint
s1~text~string~length=              -- 2 bytes
s2~text~length=                     -- 1 grapheme
s2~text~codepoints~size=            -- 2 codepoints
s2~text~string~length=              -- 3 bytes
*/
sleep no prompt


.encoding~defaultEncoding = "utf8"
s1~text~length=                     -- 1 grapheme
s1~text~codepoints~size=            -- 1 codepoint
s1~text~string~length=              -- 2 bytes
s2~text~length=                     -- 1 grapheme
s2~text~codepoints~size=            -- 2 codepoints
s2~text~string~length=              -- 3 bytes
sleep no prompt

/*
A String is linked to a RexxText, which itself is linked to this String:

    a String
     ▲  text --------⮸ a RexxText
     │                     indexer (anEncoding)
     │                          codepoints (sequential access)
     │                          graphemes  (direct access)
     +-----------------------⮷- string

The ooRexx programmer has the choice :
- working with String at byte level
- working with RexxText at grapheme level.
- the same instance of String is used in both cases.
*/
sleep
myText = "où as tu e" || .Unicode~character("combining acute accent")~utf8 || "té ?"
myText=                         -- T'où as tu été ?'
myString = myText~string
myString=                       -- 'où as tu été ?'
myString~text~identityHash == myText~identityHash=        -- true, always return the same counterpart
myText~string~identityHash == myString~identityHash=      -- true, always return the same counterpart
myString~length=                -- 18
myText~length=                  -- 14
sleep no prompt

/*
                                -- 1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 16 17 18
myString                        -- 6F C3 B9 20 61 73 20 74 75 20 65 CC 81 74 C3 A9 20 3F
                                -- o. ù....  . a. s.  . t. u.  . e. acute t. é....  . ?.
*/
sleep
myString~eachC{item~c2x}=
sleep no prompt

/*
                                -- 1  2     3  4  5  6  7  8  9  10       11 12    13 14
myText                          -- 6F C3B9  20 61 73 20 74 75 20 65 CC81  74 C3A9  20 3F
                                -- o. ù...   . a. s.  . t. u.  . e. acut  t. é...   . ?.
*/
sleep
myText~graphemes~each{item~c2x}=
sleep no prompt

/*
CR+LF is a grapheme made of 2 codepoints.
LF+CR are 2 graphemes.
*/
sleep
"0D0A"x~text~description=
"0A0D"x~text~description=
sleep no prompt

/*
More examples of encoded string
*/
sleep
"¯\_(ツ)_/¯"~text~description=
"¯\_(ツ)_/¯"~text~graphemes~each{item~c2x}=
"( ͡° ͜ʖ﻿ ͡°)"~text~description=
"( ͡° ͜ʖ﻿ ͡°)"~text~graphemes~each{item~c2x}=
"(ノಠ益ಠ)ノ彡"~text~description=
"(ノಠ益ಠ)ノ彡"~text~graphemes~each{item~c2x}=
sleep no prompt

/*
U+FE0E VARIATION SELECTOR-15 (UTF-8: EF B8 8E)
https://codepoints.net/U+fe0e
This codepoint may change the appearance of the preceding character.
If that is a symbol, dingbat or emoji, U+FE0E forces it to be rendered in a
textual fashion as compared to a colorful image.

U+FE0F VARIATION SELECTOR-16 (UTF-8: EF B8 8F)
https://codepoints.net/U+fe0f
This codepoint may change the appearance of the preceding character.
If that is a symbol, dingbat or emoji, U+FE0F forces it to be rendered as a
colorful image as compared to a monochrome text variant.
In theory ❤ and ❄ (and many other emoji) should display as text style by default
without VS16, but many applications ignore that.
*/
sleep
emoji_array = ('❤', '❤️', '❄', '❄︎', '❄️', '⚪', '⚪️', '⚫', '⚫️')
emoji_array~reduce(initial:.table~new){accu[item~text] = item~text~graphemes~each{arg(1)~c2x}}==
/*
The table above is not well aligned
because the alignement is based on the length of the indexes,
which is (for the moment) a count of bytes, not a count of graphemes...
*/
sleep 9 no prompt

/*
🤦🏼‍♂️
is one grapheme, made up of 5 codepoints.
*/
"🤦🏼‍♂️"~text~description=                                         -- 1 grapheme, 5 codepoints, 17 bytes
"🤦🏼‍♂️"~text~graphemes~each{item~c2x}=                            -- F09FA4A6F09F8FBCE2808DE29982EFB88F
"🤦🏼‍♂️"~text~codepoints~each{.UTF8_Encoding~encode(item)~c2x}=    -- F09FA4A6 F09F8FBC E2808D E29982 EFB88F
"🤦🏼‍♂️"~text~codepoints~each{"U+"item~d2x}=                       -- U+1F926 U+1F3FC U+200D U+2642 U+FE0F
sleep no prompt

/*
https://www.reddit.com/r/cpp/comments/aqzu7i
👩‍👨‍👩‍👧‍👦‍👧‍👧‍👦
is one grapheme, made up of 13 codepoints (jlf: typo? I get 15 codepoints)
*/
sleep
"👩‍👨‍👩‍👧‍👦‍👧‍👧‍👦"~text~description=                              -- 1 grapheme, 15 codepoints, 53 bytes
"👩‍👨‍👩‍👧‍👦‍👧‍👧‍👦"~text~graphemes~each{item~c2x}=
"👩‍👨‍👩‍👧‍👦‍👧‍👧‍👦"~text~codepoints~each{.UTF8_Encoding~encode(item)~c2x}=
"👩‍👨‍👩‍👧‍👦‍👧‍👧‍👦"~text~codepoints~each{"U+"item~d2x}=
sleep no prompt

/*
https://onlineunicodetools.com/generate-zalgo-unicode
Uses Unicode combining characters to create symbol noise.
"hello" zalgoified:
h̵᷊̟͉͔̟̲͆e̷͇̼͉̲̾l̸̨͓̭̗᷿︣︠ͦl̶̯̻̑̈ͮ͌︡̕o̵̝̬̯᷊̭̯̦᷃ͪ̆́᷈́͜͢͞
*/
sleep
"h̵᷊̟͉͔̟̲͆e̷͇̼͉̲̾l̸̨͓̭̗᷿︣︠ͦl̶̯̻̑̈ͮ͌︡̕o̵̝̬̯᷊̭̯̦᷃ͪ̆́᷈́͜͢͞"~text~description=                                -- 5 graphemes, 54 codepoints, 111 bytes
"h̵᷊̟͉͔̟̲͆e̷͇̼͉̲̾l̸̨͓̭̗᷿︣︠ͦl̶̯̻̑̈ͮ͌︡̕o̵̝̬̯᷊̭̯̦᷃ͪ̆́᷈́͜͢͞"~text~graphemes~each{item~c2x}=
"h̵᷊̟͉͔̟̲͆e̷͇̼͉̲̾l̸̨͓̭̗᷿︣︠ͦl̶̯̻̑̈ͮ͌︡̕o̵̝̬̯᷊̭̯̦᷃ͪ̆́᷈́͜͢͞"~text~codepoints~each{.UTF8_Encoding~encode(item)~c2x}=
"h̵᷊̟͉͔̟̲͆e̷͇̼͉̲̾l̸̨͓̭̗᷿︣︠ͦl̶̯̻̑̈ͮ͌︡̕o̵̝̬̯᷊̭̯̦᷃ͪ̆́᷈́͜͢͞"~text~codepoints~each{"U+"item~d2x}=
sleep no prompt

/*
Supported encoding conversions:
Byte to UTF-8
Byte to UTF-16
UTF-8 to UTF-16
UTF-16 to UTF-8
*/
sleep no prompt

/*
The Byte_Encoding can be specialized to add support for specific encoding conversions.
*/
sleep
.Encoding~supported~table==
sleep no prompt

/*
Example: CP1252 to UTF-8
"Un œuf de chez MaPoule™ coûte ±0.40€"
*/
sleep
str_cp1252 = "Un " || "9C"x || "uf de chez MaPoule" || "99"x || " co" || "FB"x || "te " || "B1"x || "0.40" || "80"x
str_cp1252=
txt_cp1252 = str_cp1252~text("cp1252")
txt_cp1252~description=
txt_cp1252~graphemes~each{item~c2x}=
txt_utf8 = txt_cp1252~utf8
txt_utf8=
txt_utf8~description=
txt_utf8~graphemes~each{item~c2x}=
sleep no prompt

goto end

/*
https://andre.arko.net/2013/12/01/strings-in-ruby-are-utf-8-now/
"baﬄe".upcase == "BAFFLE"

http://xahlee.info/comp/unicode_invert_text.html
Inverted text: :ʇxǝʇ pǝʇɹǝʌuI

http://xahlee.info/comp/unicode_animals.html
T-REXX: 🦖

http://t-a-w.blogspot.com/2008/12/funny-characters-in-unicode.html
SKULL AND CROSSBONES
SNOWMAN
POSTAL MARK FACE
APL FUNCTIONAL SYMBOL TILDE DIAERESIS
ARABIC LIGATURE UIGHUR KIRGHIZ YEH WITH HAMZA ABOVE WITH ALEF MAKSURA ISOLATED FORM
ARABIC LIGATURE SALLALLAHOU ALAYHE WASALLAM
THAI CHARACTER KHOMUT
GLAGOLITIC CAPITAL LETTER SPIDERY HA
VERY MUCH GREATER-THAN
NEITHER LESS-THAN NOR GREATER-THAN
HEAVY BLACK HEART
FLORAL HEART BULLET, REVERSED ROTATED
INTERROBANG
𝄞 (U+1D11E) MUSICAL SYMBOL G CLEF
𝕥 (U+1D565) MATHEMATICAL DOUBLE-STRUCK SMALL T
𝟶 (U+1D7F6) MATHEMATICAL MONOSPACE DIGIT ZERO
𠂊 (U+2008A) Han Character

https://news.ycombinator.com/item?id=20058454
If I type anything like किमपि (“kimapi”) and hit backspace, it turns into किमप (“kimapa”).
That is, the following sequence of codepoints:
    ‎0915 DEVANAGARI LETTER KA
    ‎093F DEVANAGARI VOWEL SIGN I
    ‎092E DEVANAGARI LETTER MA
    ‎092A DEVANAGARI LETTER PA
    ‎093F DEVANAGARI VOWEL SIGN I
made of three grapheme clusters (containing 2, 1, and 2 codepoints respectively),
turns after a single backspace into the following sequence:
    ‎0915 DEVANAGARI LETTER KA
    ‎093F DEVANAGARI VOWEL SIGN I
    ‎092E DEVANAGARI LETTER MA
    ‎092A DEVANAGARI LETTER PA
This is what I expect/find intuitive, too, as a user.
Similarly अन्यच्च is made of 3 grapheme clusters but you hit backspace 7 times to delete it
(though there I'd slightly have preferred अन्यच्च→अन्यच्→अन्य→अन्→अ instead of
अन्यच्च→अन्यच्→अन्यच→अन्य→अन्→अन→अ that's seen, but one can live with this).

https://news.ycombinator.com/item?id=20056966
What does "index" mean? (hindi) "इंडेक्स" का क्या अर्थ है?

https://discourse.julialang.org/t/problems-with-deprecations-of-islower-lowercase-isupper-uppercase/7797/13
    julia> '\ub5'
    'µ': Unicode U+00b5 (category Ll: Letter, lowercase)

    julia> '\uff'
    'ÿ': Unicode U+00ff (category Ll: Letter, lowercase)

    julia> Base.Unicode.uppercase("ÿ")[1]
    'Ÿ': Unicode U+0178 (category Lu: Letter, uppercase)

    julia> Base.Unicode.uppercase("µ")[1]
    'Μ': Unicode U+039c (category Lu: Letter, uppercase)

https://mortoray.com/2013/11/27/the-string-type-is-broken/
    Objective-C’s NSString type does correctly upper-case baﬄe into BAFFLE.
    Q: What about getting the first three characters of “baﬄe”? Is “baf” the correct answer?
    A:  That’s a good question. I suspect “baf” is the correct answer, and I wonder if there is any library that does it.
        I suspect if you normalize it first (since the ffl would disappear I think).
    A:  The ligarture disappears in NFK[CD] but not in NF[CD].
        Whether normalization to NFK[CD] is a good idea depends (as always) on the situation.
        For visual grapheme cluster counting, one would convert the entire text to NFKC.
        I assume, that articles are stored in NFC (the nondestructive normalization form with smallest memory footprint).
        The Unicode standard does not treat ligatures as containing more than one grapheme cluster for that normalization forms that permits them.
        So “eﬄab” is the correct result of reversing “baﬄe”
        and “baﬄe”[2] has to return “ﬄ” even when working on the grapheme cluster level!
*/

end:
/*
End of demonstration.
*/
prompt directory on
demo off
