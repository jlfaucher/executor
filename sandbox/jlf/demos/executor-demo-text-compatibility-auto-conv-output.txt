loadPackage OK for extension/stringChunk.cls
loadPackage OK for utilities/indentedStream.cls
loadPackage OK for extension/extensions.cls
loadLibrary OK for rxunixsys
loadPackage OK for ncurses.cls
loadPackage OK for csvStream.cls
loadLibrary OK for hostemu
loadPackage OK for json.cls
loadPackage OK for mime.cls
loadPackage OK for rxftp.cls
loadLibrary OK for rxmath
loadPackage OK for rxregexp.cls
loadPackage OK for regex/regex.cls
loadPackage OK for smtp.cls
loadPackage OK for socket.cls
loadPackage OK for streamsocket.cls
loadPackage OK for pipeline/pipe.cls
loadPackage OK for rgf_util2/rgf_util2.rex
loadPackage OK for BSF.CLS
loadPackage OK for oorexxshell_queries.cls
loadPackage OK for pipeline/pipe_extension.cls
loadPackage OK for rgf_util2/rgf_util2_wrappers.rex

REXX-ooRexx_4.3.0(MT)_64-bit 6.04 22 Jun 2024
Input queue name: Saf22Q600001c5ef20

ooRexx[bash]> call loadUnicodeCharacterNames
Load the Unicode character names 15.1.0 
............................................
Total loaded character names: 149813
Total character name aliases: 473
Unicode character intervals not expanded, execute: call expandUnicodeCharacterIntervals


----------------------------------------------------------------
-- Text encoding - Compatibility with String
-- Automatic conversion of String literals to RexxText instances
----------------------------------------------------------------

/*
Compatibility with the class String.
This is a work in progress, many methods not yet supported,
Unicode implementation still missing for many methods.
*/

/*
This string is used in several places:
"no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"
Depending on your editor/browser, you may see 5 emojis, or 3 emojis.
With Unicode 13, the display is 3 emojis (woman + family + father christmas).
üë©	U+1F469	WOMAN
‚Äç	U+200D	ZERO WIDTH JOINER
üë®	U+1F468	MAN
‚Äç	U+200D	ZERO WIDTH JOINER
üë©	U+1F469	WOMAN
‚Äç	U+200D	ZERO WIDTH JOINER
üëß	U+1F467	GIRL
üéÖ	U+1F385	FATHER CHRISTMAS

Notice that üë©‚Äçüë®‚Äçüë©‚Äçüëß constitute only 1 grapheme thanks to the ZERO WIDTH JOINER.
*/


ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~description=
'UTF-8 not-ASCII (6 characters, 12 codepoints, 34 bytes, 0 error)'
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~c2u=
'U+006E U+006F U+00EB U+006C U+1F469 U+200D U+1F468 U+200D U+1F469 U+200D U+1F467 U+1F385'
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~c2x=
'6E 6F C3AB 6C F09F91A9 E2808D F09F91A8 E2808D F09F91A9 E2808D F09F91A7 F09F8E85'
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~c2g=
'6E 6F C3AB 6C F09F91A9E2808DF09F91A8E2808DF09F91A9E2808DF09F91A7 F09F8E85'


/*
Two RexxText values are considered equal if their extended grapheme clusters
are canonically equivalent.This is used by the Swift language.
Q&A: https://lists.isocpp.org/sg16/2018/08/0121.php

TODO: confirm that it's NFC, and only that.
The definition of canonical equivalence by the Unicode standard seems not
limited to NFC. https://unicode.org/notes/tn5/
*/

/*
The strict comparison operators use the NFC normalization.
After normalization, they delegate to the String's strict comparison operators.

The non-strict comparison operators use the NFKD normalization plus
    stripIgnorable:.true
    lump:.true
After normalization + transformations, they delegate to the String's non-strict
comparison operators. Thanks to the lump transformation, all the Unicode spaces
are supported.
*/

ooRexx[bash]> textNFC = "No√´l"~NFC
ooRexx[bash]> textNFC~UnicodeCharacters==
an Array (shape [4], 4 items)
 1 : ( "N"   U+004E Lu 1 "LATIN CAPITAL LETTER N" )
 2 : ( "o"   U+006F Ll 1 "LATIN SMALL LETTER O" )
 3 : ( "√´"   U+00EB Ll 1 "LATIN SMALL LETTER E WITH DIAERESIS" )
 4 : ( "l"   U+006C Ll 1 "LATIN SMALL LETTER L" )
ooRexx[bash]> textNFD="No√´l"~NFD
ooRexx[bash]> textNFD~UnicodeCharacters==
an Array (shape [5], 5 items)
 1 : ( "N"   U+004E Lu 1 "LATIN CAPITAL LETTER N" )
 2 : ( "o"   U+006F Ll 1 "LATIN SMALL LETTER O" )
 3 : ( "e"   U+0065 Ll 1 "LATIN SMALL LETTER E" )
 4 : ( "Ãà"    U+0308 Mn 0 "COMBINING DIAERESIS" )
 5 : ( "l"   U+006C Ll 1 "LATIN SMALL LETTER L" )
ooRexx[bash]> (textNFC == textNFD)=                                               -- 1
 1
ooRexx[bash]> (textNFC = textNFD)=                                                -- 1
 1
ooRexx[bash]> (" "textNFC == textNFD" ")=                                         -- 0 because strict
 0
ooRexx[bash]> (" "textNFC = textNFD" ")=                                          -- 1
 1
ooRexx[bash]> (" "textNFC = (textNFD"\u{NBSP}")~unescape)=                        -- 1
 1
ooRexx[bash]> (" "textNFC = (textNFD"\u{ZWSP}")~unescape)=                        -- 1
 1
ooRexx[bash]> ("-"textNFC = ("\u{OBLIQUE HYPHEN}"textNFD"\u{ZWSP}")~unescape)=    -- 1
 1


-- []
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"[3]=; result~description=
T'√´'
'UTF-8 not-ASCII (1 character, 1 codepoint, 2 bytes, 0 error)'
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"[3,3]=; result~description=
T'√´lüë©‚Äçüë®‚Äçüë©‚Äçüëß'
'UTF-8 not-ASCII (3 characters, 9 codepoints, 28 bytes, 0 error)'
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"[3,6]=; result~description=
T'√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ'
'UTF-8 not-ASCII (4 characters, 10 codepoints, 32 bytes, 0 error)'


-- ?
ooRexx[bash]> "0"~?("true", "false")=
'false'
ooRexx[bash]> "1"~?("true", "false")=
'true'
ooRexx[bash]> "not a boolean value"~?("true", "false")=
Logical value must be exactly "0" or "1"; found "not a boolean value".
Error code= 34.901
ooRexx[bash]> "not a boolean value ü§î"~?("true", "false")=
UTF-8 not-ASCII 'not a b...' is not compatible with a Rexx logical value.
Error code= 23.900
ooRexx[bash]> "0"~?("true ü§î", "false ü§î")=
T'false ü§î'
ooRexx[bash]> "1"~?("true ü§î", "false ü§î")=
T'true ü§î'


-- append
ooRexx[bash]> "hello"~append(" ")~append("john")=
'hello john'
ooRexx[bash]> "\uD83D"~text("wtf8")~append("\uDE3F")~unescape=    -- High surrogate followed by low surrogate is valid WTF-8
T'üòø'
ooRexx[bash]> "\uD83D"~text("utf8")~append("\uDE3F")~unescape=    -- High surrogate followed by low surrogate is INVALID UTF-8
T'ÔøΩÔøΩÔøΩÔøΩÔøΩÔøΩ'
ooRexx[bash]> -- Something to rework: the String BIF/BIM lose the encoding
-- Must use ~text to have the right encoding after concatenation of WTF-8 with UTF-8
-- See diary on 2022 August 03: The ~unescape will manage correctly this concatenation when WTF-8
-- Using ~~setEncoding("wtf8") instead of ~text("wtf8") doesn't work because the encoding is lost:
ooRexx[bash]> "\uD83D"~text("wtf8")~append("\uDE3F")=; result~description=            -- T'\uD83D\uDE3F'  'WTF-8 ASCII (12 characters, 12 codepoints, 12 bytes, 0 error)'
T'\uD83D\uDE3F'
'WTF-8 ASCII (12 characters, 12 codepoints, 12 bytes, 0 error)'
ooRexx[bash]> "\uD83D"~text("wtf8")~append("\uDE3F")~unescape~c2x=                    -- 'F09F98BF'   good!
'F09F98BF'
ooRexx[bash]> "\uD83D"~~setEncoding("wtf8")~append("\uDE3F")=; result~description=    -- '\uD83D\uDE3F'   'UTF-8 ASCII by default (12 bytes)'
'\uD83D\uDE3F'
'UTF-8 ASCII by default (12 bytes)'
ooRexx[bash]> "\uD83D"~~setEncoding("wtf8")~append("\uDE3F")~unescape~c2x=            -- 'ED A0 BD ED B8 BF'  not good!
'ED A0 BD ED B8 BF'


-- c2d
ooRexx[bash]> "e"~c2d=
 101
ooRexx[bash]> "√©"~c2d=
 50089


-- c2x
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~c2x=
'6E 6F C3AB 6C F09F91A9 E2808D F09F91A8 E2808D F09F91A9 E2808D F09F91A7 F09F8E85'


/*
A caseless method is transforming its arguments using CaseFold.
The default normalization is NFC, it's possible to change it with the argument
normalization
    .unicode~NFC    (default)
    .unicode~NFD
    .unicode~NFKC
    .unicode~NFKD
There is no value NFKC_CF because it can be done using the caseless methods by
passing NFKC + stripIgnorable.
*/


-- caselessCompare
-- casefold 2 characters: "√ü" becomes "ss"
ooRexx[bash]> "Bundesstra√üe im Freiland"~caselessCompare("Bundesstra√üe")=        -- 14
 14
ooRexx[bash]> "Bundesstra√üe im Freiland"~caselessCompare("Bundesstra√üe", "_")=   -- 13
 13
ooRexx[bash]> "Bundesstra√üe im Freiland"~caselessCompare("bundesstrasse")=       -- 14
 14
ooRexx[bash]> "Bundesstrasse im Freiland"~caselessCompare("bundesstra√üe")=       -- 15
 15
ooRexx[bash]> "stra√üss√ü√üssse"~compare("stra", "√ü")=                              --  6
 6
ooRexx[bash]> "stra√üss√ü√üssse"~caselessCompare("stra", "√ü")=                      -- 12 (not 13 because the last 's' matches only half of the casefolded pad "√ü" which is "ss")
 12


-- caselessCompareTo
ooRexx[bash]> "pere noel"~caselessCompareTo("P√®re No√´l")=                    -- -1 (lesser)
-1
ooRexx[bash]> "pere noel"~caselessCompareTo("P√®re No√´l", stripMark:.true)=   --  0 (equal because the accents are ignored)
 0


-- caselessEndsWith
ooRexx[bash]> "hello"~caselessEndsWith("")=                  -- false
 0
ooRexx[bash]> "hello"~caselessEndsWith("O")=                 -- true
 1
ooRexx[bash]> "hello"~caselessEndsWith("√î")=                 -- false
 0
ooRexx[bash]> "hello"~caselessEndsWith("√î", stripMark:)=     -- true
 1
"no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~caselessEndsWith("üéÖ")=                -- true
 1
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~caselessEndsWith("üëßüéÖ")=              -- false (not aligned with a grapheme)
 0
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~caselessEndsWith("‚ÄçüëßüéÖ")=             -- false (not aligned with a grapheme)
 0
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~caselessEndsWith("üë©‚ÄçüëßüéÖ")=           -- false (not aligned with a grapheme)
 0
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~caselessEndsWith("√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ")=   -- true
 1
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~caselessEndsWith("√ãLüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ")=   -- true
 1


-- caselessEquals
ooRexx[bash]> "≈íUF"~caselessEquals("≈ìuf")=           -- 1
 1
ooRexx[bash]> "≈ìuf"~caselessEquals("≈íUF")=           -- 1
 1
ooRexx[bash]> "Stra√üe"~caselessEquals("strasse")=    -- 1
 1
ooRexx[bash]> "strasse"~caselessEquals("Stra√üe")=    -- 1
 1

-- caselessEquals (cont.) strict versus non-strict
ooRexx[bash]> string1 = "LE\u{IDEOGRAPHIC SPACE}P√à\u{ZERO-WIDTH-SPACE}RE\u{HYPHEN}NO√ãL"~unescape
ooRexx[bash]> string2 = "Le\u{OGHAM SPACE MARK}P√®re\u{EN DASH}No\u{ZERO-WIDTH-SPACE}√´l"~unescape
ooRexx[bash]> string1=                                                -- T'LE„ÄÄP√à‚ÄãRE‚ÄêNO√ãL
T'LE„ÄÄP√à‚ÄãRE‚ÄêNO√ãL'
ooRexx[bash]> string2=                                                -- T'Le·öÄP√®re‚ÄìNo‚Äã√´l'
T'Le·öÄP√®re‚ÄìNo‚Äã√´l'
ooRexx[bash]> string1~c2x=                                            -- '4C 45 E38080 50 C388 E2808B 52 45 E28090 4E 4F C38B 4C'
'4C 45 E38080 50 C388 E2808B 52 45 E28090 4E 4F C38B 4C'
ooRexx[bash]> string2~c2x=                                            -- '4C 65 E19A80 50 C3A8 72 65 E28093 4E 6F E2808B C3AB 6C'
'4C 65 E19A80 50 C3A8 72 65 E28093 4E 6F E2808B C3AB 6C'
ooRexx[bash]> string1~caselessEquals(string2)=                        -- false (strict mode by default)
 0

-- The non-strict mode applies these transformations:
ooRexx[bash]> string1~nfkd(casefold:, lump:, stripIgnorable:)~c2x=    -- '6C 65 20 70 65 CC80 72 65 2D 6E 6F 65 CC88 6C'
'6C 65 20 70 65 CC80 72 65 2D 6E 6F 65 CC88 6C'
ooRexx[bash]> string2~nfkd(casefold:, lump:, stripIgnorable:)~c2x=    -- '6C 65 20 70 65 CC80 72 65 2D 6E 6F 65 CC88 6C'
'6C 65 20 70 65 CC80 72 65 2D 6E 6F 65 CC88 6C'
ooRexx[bash]> string1~caselessEquals(string2, strict:.false)=         -- true (non-strict mode)
 1


-- caselessMatch
-- "Bundesschnellstra√üe"                                    -- at 14: "s", at 18:"√ü"
--  1234567890123456789
ooRexx[bash]> "Bundesstra√üe im Freiland"~caselessMatch(14, "im")=    -- .true
 1


-- caselessMatchChar
-- "Bundesschnellstra√üe"                               -- at 14: "s", at 18:"√ü"
--  1234567890123456789
ooRexx[bash]> "Bundesschnellstra√üe"~caselessMatchChar(18, "s")=      -- 0    "√ü" becomes "ss" which is 2 characters. "s" doesn't match "ss".
 0
ooRexx[bash]> "Bundesschnellstra√üe"~caselessMatchChar(19, "s")=      -- 0    "√ü" becomes "ss" which is 2 characters. The character at 19 is "e", not the second "s"
 0
ooRexx[bash]> "Bundesschnellstra√üe"~caselessMatchChar(19, "e")=      -- 1    "√ü" becomes "ss" which is 2 characters. The character at 19 is "e", not the second "s"
 1

-- caselessMatchChar (cont.)
-- The ligature disappears when casefolded
ooRexx[bash]> "baÔ¨Ñe"~casefold=                                        -- T'baffle'
T'baffle'
ooRexx[bash]> "BAFFLE"~caselessMatchChar(3, "Ô¨Ñ")=                     -- 0   The 3rd character "F" casefolded "f" doesn't match ""Ô¨Ñ"" casefolded "ffl"
 0
ooRexx[bash]> "BAFFLE"~caselessMatchChar(5, "Ô¨Ñ")=                     -- 0   The 5th character "L" casefolded "l" doesn't match ""Ô¨Ñ"" casefolded "ffl"
 0
ooRexx[bash]> "BAFFLE"~caselessMatchChar(5, "L")=                      -- 1   There is a match on "l" at 5
 1

-- caselessMatchChar (cont.)
-- Some ligatures are not decomposed by NFKC.
ooRexx[bash]> "≈íUF"~caselessEquals("oeuf")=                                  -- 0
 0
ooRexx[bash]> "≈íUF"~caselessEquals("oeuf", normalization:.Unicode~NFKC)=     -- 0
 0


-- caselessPos
ooRexx[bash]> "P√®re No√´l P√®re No√´l"~caselessPos("O√ã")=                   -- 7
 7
ooRexx[bash]> "P√®re No√´l P√®re No√´l"~caselessPos("O√ã", 8)=                -- 17
 17
ooRexx[bash]> "P√®re No√´l P√®re No√´l"~caselessPos("O√ã", 8, 10)=            -- 0
 0
ooRexx[bash]> "P√®re No√´l P√®re No√´l"~caselessPos("OE")=                   -- 0
 0
ooRexx[bash]> "P√®re No√´l P√®re No√´l"~caselessPos("OE", stripMark:)=       -- 7
 7
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~caselessPos("üéÖ")=                  -- 6
 6
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~caselessPos("üëßüéÖ")=               -- 0
 0

-- caselessPos in not-aligned mode
/*
aligned=.false is intended for analysis of matchings and [non-]regression tests.
Otherwise, I don't see any use.

If aligned=.false then return a couple (array) of numbers +/-posC.posB where
posB is the position of the matched byte in the transformed haystack, and posC
is the corresponding grapheme position in the untransformed haystack.
A number is negative if the byte position is not aligned with the corresponding
character position.
The first number is the start of the matching.
The second number is the end of the matching + 1.
*/
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~caselessPos("üëßüéÖ", aligned:.false)=   -- [-5.27,+7.35]
[-5.27,+7.35]
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~caselessPos("üë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ", aligned:.false)=   -- [+5.6,+7.35]
[+5.6,+7.35]


-- center
ooRexx[bash]> "noelFC"~center(10)=; result~description=              -- forward to String
'  noelFC  '
'UTF-8 ASCII by default (10 bytes)'
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~center(10)=; result~description=
T'  no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ  '
'UTF-8 not-ASCII (10 characters, 16 codepoints, 38 bytes, 0 error)'
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~center(9)=; result~description=
T' no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ  '
'UTF-8 not-ASCII (9 characters, 15 codepoints, 37 bytes, 0 error)'
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~center(8)=; result~description=
T' no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ '
'UTF-8 not-ASCII (8 characters, 14 codepoints, 36 bytes, 0 error)'
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~center(7)=; result~description=
T'no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ '
'UTF-8 not-ASCII (7 characters, 13 codepoints, 35 bytes, 0 error)'
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~center(6)=; result~description=
T'no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ'
'UTF-8 not-ASCII (6 characters, 12 codepoints, 34 bytes, 0 error)'
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~center(5)=; result~description=
T'no√´lüë©‚Äçüë®‚Äçüë©‚Äçüëß'
'UTF-8 not-ASCII (5 characters, 11 codepoints, 30 bytes, 0 error)'
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~center(4)=; result~description=
T'o√´lüë©‚Äçüë®‚Äçüë©‚Äçüëß'
'UTF-8 not-ASCII (4 characters, 10 codepoints, 29 bytes, 0 error)'
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~center(3)=; result~description=
T'o√´l'
'UTF-8 not-ASCII (3 characters, 3 codepoints, 4 bytes, 0 error)'
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~center(2)=; result~description=
T'√´l'
'UTF-8 not-ASCII (2 characters, 2 codepoints, 3 bytes, 0 error)'
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~center(1)=; result~description=
T'√´'
'UTF-8 not-ASCII (1 character, 1 codepoint, 2 bytes, 0 error)'
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~center(0)=; result~description=
T''
'UTF-8 ASCII (0 character, 0 codepoint, 0 byte, 0 error)'

-- center with pad
ooRexx[bash]> "="~description=                                            -- 'UTF-8 ASCII (1 byte)'
'UTF-8 ASCII (1 byte)'
ooRexx[bash]> "="~c2x=                                                    -- '3D'
'3D'
ooRexx[bash]> "noelFC"~center(10, "=")=; result~description=              -- forward to String
'==noelFC=='
'UTF-8 ASCII by default (10 bytes)'
ooRexx[bash]> "‚ïê"~description=                                            -- 'UTF-8 not-ASCII (1 character, 1 codepoint, 3 bytes, 0 error)'   (was 'UTF-8 not-ASCII (3 bytes)')
'UTF-8 not-ASCII (1 character, 1 codepoint, 3 bytes, 0 error)'
ooRexx[bash]> "‚ïê"~description=                                            -- 'UTF-8 not-ASCII (1 character, 1 codepoint, 3 bytes, 0 error)'
'UTF-8 not-ASCII (1 character, 1 codepoint, 3 bytes, 0 error)'
ooRexx[bash]> "‚ïê"~c2x=                                                    -- 'E29590'
'E29590'
ooRexx[bash]> "noelFC"~center(10, "‚ïê")=; result~description=              -- don't forward to String because the pad is more than 1 byte
T'‚ïê‚ïênoelFC‚ïê‚ïê'
'UTF-8 not-ASCII (10 characters, 10 codepoints, 18 bytes, 0 error)'
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~center(10, "‚ïê")=; result~description=
T'‚ïê‚ïêno√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ‚ïê‚ïê'
'UTF-8 not-ASCII (10 characters, 16 codepoints, 46 bytes, 0 error)'
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~center(9, "‚ïê")=; result~description=
T'‚ïêno√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ‚ïê‚ïê'
'UTF-8 not-ASCII (9 characters, 15 codepoints, 43 bytes, 0 error)'
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~center(8, "‚ïê")=; result~description=
T'‚ïêno√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ‚ïê'
'UTF-8 not-ASCII (8 characters, 14 codepoints, 40 bytes, 0 error)'
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~center(7, "‚ïê")=; result~description=
T'no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ‚ïê'
'UTF-8 not-ASCII (7 characters, 13 codepoints, 37 bytes, 0 error)'
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~center(6, "‚ïê")=; result~description=
T'no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ'
'UTF-8 not-ASCII (6 characters, 12 codepoints, 34 bytes, 0 error)'


-- compare
ooRexx[bash]> "Bundesstra√üe im Freiland"~compare("Bundesstra√üe")=        -- 14
 14
ooRexx[bash]> "Bundesstra√üe im Freiland"~compare("Bundesstra√üe", "_")=   -- 13
 13
ooRexx[bash]> "Bundesstra√üe im Freiland"~compare("Bundesstrasse")=       -- 11
 11
ooRexx[bash]> "Bundesstrasse im Freiland"~compare("Bundesstra√üe")=       -- 11
 11
ooRexx[bash]> "stra√üss√ü√üssse"~compare("stra", "√ü")=                      --  6
 6


-- compareTo
ooRexx[bash]> "pere noel"~compareTo("p√®re no√´l")=                    -- -1 (lesser)
-1
ooRexx[bash]> "pere noel"~compareTo("p√®re no√´l", stripMark:.true)=   --  0 (equal because the accents are ignored)
 0


-- contains
ooRexx[bash]> "noel"~contains("oe")=            -- forward to String
 1
ooRexx[bash]> "noel"~contains("oe")=            -- forward to String
 1
ooRexx[bash]> "noel"~contains("o√´")=
 0
ooRexx[bash]> "noel"~contains("o√´")=
 0
ooRexx[bash]> "no√´l"~contains("oe")=
 0
ooRexx[bash]> "no√´l"~contains("oe")=
 0
ooRexx[bash]> "no√´l"~contains("o√´")=
 1
ooRexx[bash]> "no√´l"~contains("o√´")=
 1


-- copies
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~copies(4)=; result~description=
T'no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖno√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖno√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖno√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ'
'UTF-8 not-ASCII (24 characters, 48 codepoints, 136 bytes, 0 error)'


-- endsWith
ooRexx[bash]> "hello"~endsWith("")=                  -- false
 0
ooRexx[bash]> "hello"~endsWith("o")=                 -- true
 1
ooRexx[bash]> "hello"~endsWith("√¥")=                 -- false
 0
ooRexx[bash]> "hello"~endsWith("√¥", stripMark:)=     -- true
 1
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~endsWith("üéÖ")=                -- true
 1
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~endsWith("üëßüéÖ")=              -- false (not aligned with a grapheme)
 0
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~endsWith("‚ÄçüëßüéÖ")=             -- false (not aligned with a grapheme)
 0
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~endsWith("üë©‚ÄçüëßüéÖ")=           -- false (not aligned with a grapheme)
 0
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~endsWith("√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ")=   -- true
 1
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~endsWith("√ãLüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ")=   -- false
 0


-- equals
ooRexx[bash]> "≈íUF"~lower~equals("≈ìuf")=             -- true
 1
ooRexx[bash]> "≈íUF"~equals("≈ìuf")=                   -- false (would be true if caseless)
 0
ooRexx[bash]> "≈ìuf"~equals("≈íUF")=                   -- false (would be true if caseless)
 0
ooRexx[bash]> "Stra√üe"~lower~equals("stra√üe")=       -- true (U+00DF "LATIN SMALL LETTER SHARP S" remains unchanged since it's already a lower letter)
 1
ooRexx[bash]> "Stra√üe"~casefold~equals("strasse")=   -- true (U+00DF "LATIN SMALL LETTER SHARP S" becomes "ss" when casefolded)
 1
ooRexx[bash]> "Stra√üe"~equals("strasse")=            -- false (would be true if caseless)
 0
ooRexx[bash]> "strasse"~equals("Stra√üe")=            -- false (would be true if caseless)
 0

-- equals (cont.) strict versus non-strict
ooRexx[bash]> string1 = "Le\u{IDEOGRAPHIC SPACE}P√®\u{ZERO-WIDTH-SPACE}re\u{HYPHEN}No√´l"~unescape
ooRexx[bash]> string2 = "Le\u{OGHAM SPACE MARK}P√®re\u{EN DASH}No\u{ZERO-WIDTH-SPACE}√´l"~unescape
ooRexx[bash]> string1=                                    -- T'Le„ÄÄP√®‚Äãre‚ÄêNo√´l'
T'Le„ÄÄP√®‚Äãre‚ÄêNo√´l'
ooRexx[bash]> string2=                                    -- T'Le·öÄP√®re‚ÄìNo‚Äã√´l'
T'Le·öÄP√®re‚ÄìNo‚Äã√´l'
ooRexx[bash]> string1~c2x=                                -- '4C 65 E38080 50 C3A8 E2808B 72 65 E28090 4E 6F C3AB 6C'
'4C 65 E38080 50 C3A8 E2808B 72 65 E28090 4E 6F C3AB 6C'
ooRexx[bash]> string2~c2x=                                -- '4C 65 E19A80 50 C3A8 72 65 E28093 4E 6F E2808B C3AB 6C'
'4C 65 E19A80 50 C3A8 72 65 E28093 4E 6F E2808B C3AB 6C'
ooRexx[bash]> string1~equals(string2)=                    -- false (strict mode by default)
 0
ooRexx[bash]> -- The non-strict mode applies these transformations:
ooRexx[bash]> string1~nfkd(lump:, stripIgnorable:)~c2x=   -- '4C 65 20 50 65 CC80 72 65 2D 4E 6F 65 CC88 6C'
'4C 65 20 50 65 CC80 72 65 2D 4E 6F 65 CC88 6C'
ooRexx[bash]> string2~nfkd(lump:, stripIgnorable:)~c2x=   -- '4C 65 20 50 65 CC80 72 65 2D 4E 6F 65 CC88 6C'
'4C 65 20 50 65 CC80 72 65 2D 4E 6F 65 CC88 6C'
ooRexx[bash]> string1~equals(string2, strict:.false)=     -- true (non-strict mode)
 1


-- hashCode
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~hashCode~class=
(The String class)
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~hashCode~c2x=
'8FA5DCDA35AE1A58'


-- left
ooRexx[bash]> do i=0 to 9; "left("i") = " || "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~left(i)=; end
T'left(0) = '
T'left(1) = n'
T'left(2) = no'
T'left(3) = no√´'
T'left(4) = no√´l'
T'left(5) = no√´lüë©‚Äçüë®‚Äçüë©‚Äçüëß'
T'left(6) = no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ'
T'left(7) = no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ '
T'left(8) = no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ  '
T'left(9) = no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ   '
ooRexx[bash]> do i=0 to 9; "left("i", ‚ñ∑) = " || "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~left(i, "‚ñ∑")=; end
T'left(0, ‚ñ∑) = '
T'left(1, ‚ñ∑) = n'
T'left(2, ‚ñ∑) = no'
T'left(3, ‚ñ∑) = no√´'
T'left(4, ‚ñ∑) = no√´l'
T'left(5, ‚ñ∑) = no√´lüë©‚Äçüë®‚Äçüë©‚Äçüëß'
T'left(6, ‚ñ∑) = no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ'
T'left(7, ‚ñ∑) = no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ‚ñ∑'
T'left(8, ‚ñ∑) = no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ‚ñ∑‚ñ∑'
T'left(9, ‚ñ∑) = no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ‚ñ∑‚ñ∑‚ñ∑'


-- length
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~length=
 6


-- lower
ooRexx[bash]> "LE P√àRE NO√ãL EST FATIGU√â..."~lower=       -- T'le p√®re no√´l est fatigu√©...'
T'le p√®re no√´l est fatigu√©...'


-- match
ooRexx[bash]> "noel"~match(2, "oe")=            -- forward to String
 1
ooRexx[bash]> "noel"~match(2, "oe")=            -- forward to String
 1
ooRexx[bash]> "noel"~match(2, "o√´")=
 0
ooRexx[bash]> "noel"~match(2, "o√´")=
 0
ooRexx[bash]> "no√´l"~match(2, "oe")=
 0
ooRexx[bash]> "no√´l"~match(2, "oe")=
 0
ooRexx[bash]> "no√´l"~match(2, "o√´")=
 1
ooRexx[bash]> "no√´l"~match(2, "o√´")=
 1
ooRexx[bash]> "no√´l"~match(2, "o√´l")=
 1
ooRexx[bash]> "no√´l"~match(2, "o√´l")=
 1
ooRexx[bash]> "no√´l"~match(3, "√´")=
 1
ooRexx[bash]> "no√´l"~match(3, "√´")=
 1
ooRexx[bash]> "no√´l"~match(3, "√´l")=
 1
ooRexx[bash]> "no√´l"~match(3, "√´l")=
 1
ooRexx[bash]> "no√´l"~match(4, "l")=
 1
ooRexx[bash]> "no√´l"~match(4, "l")=
 1


-- matchChar
ooRexx[bash]> "noel"~matchChar(3, "Ee")=        -- forward to String
 1
ooRexx[bash]> "noel"~matchChar(3, "Ee")=        -- forward to String
 1
ooRexx[bash]> "noel"~matchChar(3, "E√ãe√´")=
 1
ooRexx[bash]> "noel"~matchChar(3, "E√ãe√´")=
 1
ooRexx[bash]> "no√´l"~matchChar(3, "E√ãe√´")=
 1
ooRexx[bash]> "no√´l"~matchChar(3, "E√ãe√´")=
 1
ooRexx[bash]> "no√´l"~matchChar(3, "E√ãe√´")=
 1
ooRexx[bash]> "no√´l"~matchChar(3, "Ee", stripMark:)= -- remove the accents from the tested string
 1
ooRexx[bash]> "no√´l"~matchChar(4, "Ll")=
 1
ooRexx[bash]> "no√´l"~matchChar(4, "Ll")=
 1

-- matchChar (cont.)
-- "Bundesschnellstra√üe"                               -- at 14: "s", at 18:"√ü"
--  1234567890123456789
ooRexx[bash]> "Bundesschnellstra√üe"~matchChar(14, "s")=              -- 1
 1
ooRexx[bash]> "Bundesschnellstra√üe"~matchChar(18, "s")=              -- 0
 0
ooRexx[bash]> "Bundesschnellstra√üe"~matchChar(18, "√ü")=              -- 1
 1

-- matchChar (cont.)
-- The ligature disappears in NFK[CD] but not in NF[CD]
ooRexx[bash]> "baÔ¨Ñe"~matchChar(3, "f")=                               -- 0     "Ô¨Ñ" is ONE character, doesn't match "f"
 0
ooRexx[bash]> "baÔ¨Ñe"~matchChar(3, "Ô¨Ñ")=                              -- 1     There is a match because "Ô¨Ñ" on both sides
 1
ooRexx[bash]> "baÔ¨Ñe"~matchChar(3, "Ô¨Ñ", normalization:.Unicode~NFKD)= -- 1     There is a match because "Ô¨Ñ" on both sides
 1
ooRexx[bash]> "baÔ¨Ñe"~matchChar(3, "f", normalization:.Unicode~NFKD)=  -- 0     The 3rd character "Ô¨Ñ" becomes "ffl" (3 characters), doesn't match "f"
 0
ooRexx[bash]> "baÔ¨Ñe"~matchChar(4, "f", normalization:.Unicode~NFKD)=  -- 0     The 4th character is "e", doesn't match "f"
 0
ooRexx[bash]> "baÔ¨Ñe"~matchChar(4, "e", normalization:.Unicode~NFKD)=  -- 1     The 4th character is "e", does match "e"
 1


-- pos
ooRexx[bash]> "noel"~pos("oe")=                 -- forward to String
 2
ooRexx[bash]> "noel"~pos("oe")=                 -- forward to String
 2
ooRexx[bash]> "noel"~pos("o√´")=
 0
ooRexx[bash]> "noel"~pos("o√´")=
 0
ooRexx[bash]> "no√´l"~pos("oe")=
 0
ooRexx[bash]> "no√´l"~pos("oe")=
 0
ooRexx[bash]> "no√´l"~pos("o√´")=
 2
ooRexx[bash]> "no√´l"~pos("o√´")=
 2
ooRexx[bash]> "no√´l"~pos("l")=
 4
ooRexx[bash]> "no√´l"~pos("l")=
 4
ooRexx[bash]> "P√®re No√´l P√®re No√´l"~pos("o√´")=                        -- 7
 7
ooRexx[bash]> "P√®re No√´l P√®re No√´l"~pos("o√´", 8)=                     -- 17
 17
ooRexx[bash]> "P√®re No√´l P√®re No√´l"~pos("o√´", 8, 10)=                 -- 0
 0
ooRexx[bash]> "P√®re No√´l P√®re No√´l"~pos("oe")=                        -- 0
 0
ooRexx[bash]> "P√®re No√´l P√®re No√´l"~pos("oe", stripMark:)=            -- 7
 7
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~pos("üéÖ")=                      -- 6
 6
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~pos("üëßüéÖ")=                    -- 0
 0
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~pos("üëßüéÖ", aligned:.false)=    -- [-5.27,+7.35]
[-5.27,+7.35]
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~pos("üë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ", aligned:.false)=   -- [+5.6,+7.35]
[+5.6,+7.35]


-- reverse (correct)
ooRexx[bash]> "no√´l"~c2x=            -- '6E 6F C3AB 6C'
'6E 6F C3AB 6C'
ooRexx[bash]> "no√´l"~reverse~c2x=    -- '6C C3AB 6F 6E'
'6C C3AB 6F 6E'
ooRexx[bash]> "no√´l"~reverse=        -- T'l√´on'
T'l√´on'

-- reverse (correct)    (was reverse (wrong) before automatic conversion of string literals to text)
ooRexx[bash]> "no√´l"~c2x=             -- '6E6FC3AB6C'
'6E 6F C3AB 6C'
ooRexx[bash]> "no√´l"~reverse~c2x=     -- '6C C3AB 6F 6E'  (was '6CABC36F6E' before automatic conversion of string literals to text)
'6C C3AB 6F 6E'
ooRexx[bash]> "no√´l"~reverse=         -- T'l√´on'
T'l√´on'


-- right
ooRexx[bash]> do i=0 to 9; "right("i") = " || "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~right(i)=; end
T'right(0) = '
T'right(1) = üéÖ'
T'right(2) = üë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ'
T'right(3) = lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ'
T'right(4) = √´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ'
T'right(5) = o√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ'
T'right(6) = no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ'
T'right(7) =  no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ'
T'right(8) =   no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ'
T'right(9) =    no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ'
ooRexx[bash]> do i=0 to 9; "right("i", ‚ñ∑) = " || "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~right(i, "‚ñ∑")=; end
T'right(0, ‚ñ∑) = '
T'right(1, ‚ñ∑) = üéÖ'
T'right(2, ‚ñ∑) = üë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ'
T'right(3, ‚ñ∑) = lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ'
T'right(4, ‚ñ∑) = √´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ'
T'right(5, ‚ñ∑) = o√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ'
T'right(6, ‚ñ∑) = no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ'
T'right(7, ‚ñ∑) = ‚ñ∑no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ'
T'right(8, ‚ñ∑) = ‚ñ∑‚ñ∑no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ'
T'right(9, ‚ñ∑) = ‚ñ∑‚ñ∑‚ñ∑no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ'


-- subchar
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~subchar(3)=; result~description=
T'√´'
'UTF-8 not-ASCII (1 character, 1 codepoint, 2 bytes, 0 error)'
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~subchar(4)=; result~description=
T'l'
'UTF-8 ASCII (1 character, 1 codepoint, 1 byte, 0 error)'
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~subchar(5)=; result~description=
T'üë©‚Äçüë®‚Äçüë©‚Äçüëß'
'UTF-8 not-ASCII (1 character, 7 codepoints, 25 bytes, 0 error)'


-- substr
ooRexx[bash]> "noel"~substr(3, 3, "x")=; result~description=   -- forward to String
'elx'
'UTF-8 ASCII by default (3 bytes)'
ooRexx[bash]> "noel"~substr(3, 3, "‚ñ∑")=; result~description=   -- T'el‚ñ∑' (was: self is a String: error because the pad character is 3 bytes)
T'el‚ñ∑'
'UTF-8 not-ASCII (3 characters, 3 codepoints, 5 bytes, 0 error)'
ooRexx[bash]> "noel"~substr(3, 3, "‚ñ∑")=; result~description=   -- T'el‚ñ∑' (was: self is a String: error because the pad character is 3 bytes)
T'el‚ñ∑'
'UTF-8 not-ASCII (3 characters, 3 codepoints, 5 bytes, 0 error)'
ooRexx[bash]> "noel"~substr(3, 3, "‚ñ∑")=; result~description=   -- no error because self is a RexxText and the pad character is one character when converted to the default encoding
T'el‚ñ∑'
'UTF-8 not-ASCII (3 characters, 3 codepoints, 5 bytes, 0 error)'
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~substr(3, 3, "‚ñ∑")=; result~description=
T'√´lüë©‚Äçüë®‚Äçüë©‚Äçüëß'
'UTF-8 not-ASCII (3 characters, 9 codepoints, 28 bytes, 0 error)'
ooRexx[bash]> "no√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ"~substr(3, 6, "‚ñ∑")=; result~description=
T'√´lüë©‚Äçüë®‚Äçüë©‚ÄçüëßüéÖ‚ñ∑‚ñ∑'
'UTF-8 not-ASCII (6 characters, 12 codepoints, 38 bytes, 0 error)'


-- upper
ooRexx[bash]> "Le p√®re No√´l est fatigu√©..."~upper=       -- T'LE P√àRE NO√ãL EST FATIGU√â...'
T'LE P√àRE NO√ãL EST FATIGU√â...'




-- x2c
ooRexx[bash]> "F09F9180"~x2c=
'üëÄ'
ooRexx[bash]> "not an hexadecimal value"~x2c
Only 0-9, a-f, A-F, and whitespace characters are valid in a hexadecimal string; character found "n".
Error code= 93.933
ooRexx[bash]> "not an hexadecimal value ü§î"~x2c
UTF-8 not-ASCII 'not an ...' is not compatible with a Rexx hexadecimal value.
Error code= 23.900


---------------------------------------------------------
-- Text encoding - Functional
---------------------------------------------------------

/*
The only needed methods on RexxText are
    ~characters
    ~subwords   (still to implement)
    ~chunks     (still to implement)
*/

/*
Example inspired by https://elixir-lang.org/
Frequency of each character, ignoring the accents:
"Elixir" |> String.graphemes() |> Enum.frequencies()
%{"E" => 1, "i" => 2, "l" => 1, "r" => 1, "x" => 1}
*/

ooRexx[bash]> "Notre p√®re No√´l üéÖ"~transform(stripMark:)~reduce(by: "characters", initial: .stem~new~~put(0)){accu[item~string] += 1}=
a Stem (9 items)
'üéÖ' :  1
' '    :  3
'e'    :  4
'l'    :  1
'N'    :  2
'o'    :  2
'p'    :  1
'r'    :  2
't'    :  1


---------------------------------------------------------
-- Text encoding - Generator
---------------------------------------------------------

/*
The only needed methods on RexxText are
    ~characters
    ~subwords   (still to implement)
*/

ooRexx[bash]> g="No√´l üéÖ"~generateC
ooRexx[bash]> g~()=       -- T'N'
T'N'
ooRexx[bash]> g~()=       -- T'o'
T'o'
ooRexx[bash]> g~()=       -- T'√´'
T'√´'
ooRexx[bash]> g~()=       -- T'l'
T'l'
ooRexx[bash]> g~()=       -- T' '
T' '
ooRexx[bash]> g~()=       -- T'üéÖ'
T'üéÖ'
ooRexx[bash]> g~()=       -- [no result]
[no result]


---------------------------------------------------------
-- Text encoding - Compatibility with regular expressions
---------------------------------------------------------

/*
A way to test the compatibility of RexxText with String is to pass instances of
RexxText to the regular expression engine regex.cls, and see what happens...
*/

/*
Relax the constraint "self~isCompatibleWithByteString" when converting a RexxText
to a String. That allows to go further in the tests of regular expression.
*/
ooRexx[bash]> unckeckedConversionToString = .Unicode~unckeckedConversionToString -- backup
ooRexx[bash]> .Unicode~unckeckedConversionToString = .true

ooRexx[bash]> pB = .Pattern~compile("a.c")
ooRexx[bash]> pT = .Pattern~compile("a.c")
ooRexx[bash]> pB~matches("abc")=                              -- 1
 1
ooRexx[bash]> pT~matches("abc")=                              -- 1
 1
ooRexx[bash]> pB~matches("a√¥c")=                              -- 1    (was 0 (KO) before automatic conversion of string literals to text)
 1
ooRexx[bash]> pT~matches("a√¥c")=                              -- 1
 1
ooRexx[bash]> pB~matches("aüéÖc")=                             -- 1    (was 0 (KO) before automatic conversion of string literals to text)
 1
ooRexx[bash]> pT~matches("aüéÖc")=                             -- 1
 1

ooRexx[bash]> pB = .Pattern~compile("ü§∂...üéÖ")
ooRexx[bash]> pT = .Pattern~compile("ü§∂...üéÖ")
ooRexx[bash]> pB~matches("ü§∂123üéÖ")=                          -- 1
 1
ooRexx[bash]> pT~matches("ü§∂123üéÖ")=                          -- 1
 1
ooRexx[bash]> pB~matches("ü§∂üêï2üêàüéÖ")=                        -- 1    (was 0 (KO) before automatic conversion of string literals to text)
 1
ooRexx[bash]> pT~matches("ü§∂üêï2üêàüéÖ")=                        -- 1
 1
ooRexx[bash]> pB~matches("ü§∂üêïüë©‚Äçüë®‚Äçüë©‚ÄçüëßüêàüéÖ")=          -- 1    (was 0 (KO) before automatic conversion of string literals to text)
 1
ooRexx[bash]> pT~matches("ü§∂üêïüë©‚Äçüë®‚Äçüë©‚ÄçüëßüêàüéÖ")=          -- 1
 1

-- "ü§∂" or "üéÖ"
ooRexx[bash]> pB = .Pattern~compile("ü§∂|üéÖ")
ooRexx[bash]> pT = .Pattern~compile("ü§∂|üéÖ")
ooRexx[bash]> pB~startsWith("ü§∂üéÖc")=                        -- 1
 1
ooRexx[bash]> pT~startsWith("ü§∂üéÖc")=                        -- 1
 1
ooRexx[bash]> pB~startsWith("üéÖü§∂c")=                        -- 1
 1
ooRexx[bash]> pT~startsWith("üéÖü§∂c")=                        -- 1
 1
ooRexx[bash]> r = pB~find("xxxü§∂üéÖcxxx")
ooRexx[bash]> r~matched=; r~start=; r~end=; r=; r~length=     -- now ok (r~end was 8 and r~length was 4 before automatic conversion of string literals to text)
 1
 4
 5
(a MatchResult)
 1
ooRexx[bash]> r = pT~find("xxxü§∂üéÖcxxx")
ooRexx[bash]> r~matched=; r~start=; r~end=; r=; r~length=
 1
 4
 5
(a MatchResult)
 1
ooRexx[bash]> r = pB~find("xxxüéÖü§∂cxxx")
ooRexx[bash]> r~matched=; r~start=; r~end=; r=; r~length=     -- now ok (r~end was 8 and r~length was 4 before automatic conversion of string literals to text)
 1
 4
 5
(a MatchResult)
 1
ooRexx[bash]> r = pT~find("xxxüéÖü§∂cxxx")
ooRexx[bash]> r~matched=; r~start=; r~end=; r=; r~length=
 1
 4
 5
(a MatchResult)
 1

ooRexx[bash]> .Unicode~unckeckedConversionToString = unckeckedConversionToString -- restore


-----------------------------------------
-- Text encoding - Compatibility with BIF
-----------------------------------------

/*
The string BIFs are polymorphic on RexxString/RexxText.
If at least one positional argument is a RexxText then the BIF forwards to
RexxText, otherwise the BIF forwards to RexxString.
*/

-- Function 'center'
ooRexx[bash]> "‚ïê"~description=                                -- 'UTF-8 not-ASCII (1 character, 1 codepoint, 3 bytes, 0 error)'   (was 'UTF-8 not-ASCII (3 bytes)')
'UTF-8 not-ASCII (1 character, 1 codepoint, 3 bytes, 0 error)'
ooRexx[bash]> "‚ïê"~description=                                -- 'UTF-8 not-ASCII (1 character, 1 codepoint, 3 bytes, 0 error)'
'UTF-8 not-ASCII (1 character, 1 codepoint, 3 bytes, 0 error)'
ooRexx[bash]> "‚ïê"~c2x=                                        -- 'E29590'
'E29590'
ooRexx[bash]> center("hello", 20, "‚ïê")=                       -- T'‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêhello‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê'
T'‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêhello‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê'
ooRexx[bash]> center("hello", 20, "‚ïê")~description=           -- 'UTF-8 not-ASCII (20 characters, 20 codepoints, 50 bytes, 0 error)'
'UTF-8 not-ASCII (20 characters, 20 codepoints, 50 bytes, 0 error)'

-- Function 'left'
ooRexx[bash]> left("hello", 20, "‚ïê")=                         -- T'hello‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê'
T'hello‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê'
ooRexx[bash]> left("hello", 20, "‚ïê")~description=             -- 'UTF-8 not-ASCII (20 characters, 20 codepoints, 50 bytes, 0 error)'
'UTF-8 not-ASCII (20 characters, 20 codepoints, 50 bytes, 0 error)'


/*
[ABANDONNED]
Other polymorphism: route the BIF either towards String or towards RexxText,
in function of the compatibility of the arguments with String:
BIF(str1, str2, ..., strN)
    --> forward to String (byte-oriented) if str's encoding is Byte or UTF-8 (with ASCII characters only)
    --> forward to RexxText otherwise

Abandonned because we have already the polymorphism on RexxString/RexxText which
is more easy to control and to understand.
*/

-- UTF-8 encoding

ooRexx[bash]> "Noel"~isCompatibleWithByteString=              -- 1
 1
ooRexx[bash]> length("Noel")=                                 -- 4 because "Noel"~length = 4
 4
ooRexx[bash]> "No√´l"~isCompatibleWithByteString=              -- 0
 0
ooRexx[bash]> length("No√´l")=                                 -- 4 because "No√´l" is a RexxText   (was TODO: 4 because "No√´l"~text~length = 4)
 4
ooRexx[bash]> "No√´l"~length=                                  -- 4 because "No√´l" is a RexxText   (was "5 because String remains byte-oriented, not impacted by the default encoding" before automatic conversion of string literals to text)
 4

-- UTF-16BE encoding
ooRexx[bash]> s = "0041004200430044"x
ooRexx[bash]> s=                                              -- '[00]A[00]B[00]C[00]D'
'[00]A[00]B[00]C[00]D'
ooRexx[bash]> s~isCompatibleWithByteString=                   -- 1
 1
ooRexx[bash]> s~description=                                  -- 'UTF-8 ASCII (8 bytes)'
'UTF-8 ASCII (8 bytes)'
ooRexx[bash]> length(s)=                                      -- 8 because encoding UTF-8 ASCII is compatible with String
 8
ooRexx[bash]> s~encoding = "UTF16"
ooRexx[bash]> s~isCompatibleWithByteString=                   -- 0
 0
ooRexx[bash]> s~description=                                  -- 'UTF-16BE (8 bytes)'
'UTF-16BE (8 bytes)'
ooRexx[bash]> s~length=                                       -- 8 because String is always byte-oriented (ignores the encoding)
 8
ooRexx[bash]> length(s)=                                      -- 8    (was TODO: 4 because forwards to Text (encoding UTF-16BE is not compatible with String))
 8
ooRexx[bash]> s~utf8=                                         -- T'ABCD'
T'ABCD'

-- UTF-32 encoding
ooRexx[bash]> s = "0000004100000042"x
ooRexx[bash]> s=                                              -- '[000000]A[000000]B'
'[000000]A[000000]B'
ooRexx[bash]> s~isCompatibleWithByteString=                   -- 1
 1
ooRexx[bash]> s~description=                                  -- 'UTF-8 ASCII (8 bytes)'
'UTF-8 ASCII (8 bytes)'
ooRexx[bash]> length(s)=                                      -- 8 because encoding UTF-8 ASCII is compatible with String
 8
ooRexx[bash]> s~encoding = "UTF32"
ooRexx[bash]> s~isCompatibleWithByteString=                   -- 0
 0
ooRexx[bash]> s~description=                                  -- 'UTF-32BE (8 bytes)'
'UTF-32BE (8 bytes)'
ooRexx[bash]> s~length=                                       -- 8 because String is always byte-oriented (ignores the encoding)
 8
ooRexx[bash]> length(s)=                                      -- 8    (was TODO: 2 because forwards to Text (encoding UTF-32 is not compatible with String))
 8
ooRexx[bash]> s~utf8=                                         -- T'AB'
T'AB'


/*
End of demonstration.
*/
