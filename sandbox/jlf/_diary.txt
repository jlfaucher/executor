Sandbox for experimental work, some ideas to investigate :

Try to understand the internal locks.
--> added some OutputDebugString (Windows only), now must analyze...

Allow extension of the predefined ooRexx classes to get something similar to C# extension methods (but more powerful).
--> unlock the define method : see samples/functional for an example of use.
    unlock the inherit method
    added ::extension directive
    >>-::EXTENSION--classname----+-------------------+-----------------><
                                 +-INHERIT--iclasses-+

Add the "in" keyword to the DO repetitor : Similar to "over" but calls the method "supplier" instead of "makearray".
See if a thread could return more than one result and become a generator when synchronized with : do i in generator ...

Export the classes instantiated by the parser and make expression instances available from an ooRexx script. 
Inspired by C# LINQ and the expression tree API.
See if that can be used to write macros (i.e. transform expression tree), user directives, DSL...

Named parameters (by opposition to positional parameters). 
In C#, they say it's useful for calling COM services. 
I have some Excel macros that would be simpler to call with that.

Deferred evaluation of parameters. 
Let the routine/method decide which parameters must be evaluated, ex : iif(cond, iftrue, ifalse)

Investigate the Activation stack (reify ? closure ? continuation ?)

Unicode ?


===============================================================================
2010 april 28

rgf_util2 wrappers to make the services of Rony available as methods on predefined classes.
For proof of concept... For a real library of methods, rgf_util2 should be rewritten to use
the variable "self" where appropriate, instead of passing the object as first parameter.



===============================================================================
2010 april 25

Add ::extension directive
todo : Limit the extension to new methods, raise an error if redefining a predefined method
(but keep ~define unlocked for investigation).

todo : I don't manage dependencies on ExtensionDirective
See RexxSource::resolveDependencies, there is maybe something to do there.
Currently, if the same method is extended several times, then it's the "last" extension who wins...
The definition of "last" depends on the order of resolution of ::requires
See samples\extension\test_extension_order.rex

Remember : 
Unlike ::class, you can have several ::extension in the same source for the same class. 
So the current check for duplicate method in an ExtensionDirective is not very useful. 
The interpreter will complain for that :
::extension object
::method m
::method m
but not for that :
::extension object
::method m
::extension object
::method m


===============================================================================
2010 april 24

Unlock ~define


Creation of sandbox :
cd D:\local\Rexx\ooRexx\svn\sandbox
mkdir jlf
svn add jlf
svn commit jlf
svn copy https://oorexx.svn.sourceforge.net/svnroot/oorexx/main/trunk https://oorexx.svn.sourceforge.net/svnroot/oorexx/sandbox/jlf
svn update jlf

rev 5812
merge 5812-5835 from main/trunk
