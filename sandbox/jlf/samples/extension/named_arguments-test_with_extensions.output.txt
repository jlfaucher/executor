   delay = 0.5 -- this delay is passed to SysSleep to avoid messing the output because of the concurrent execution

-- -----------------------------------------------------------------------------
-- .Directory~of
-- -----------------------------------------------------------------------------

-- The class .Directory now supports the method ~of.
-- The key-value where the key is compatible with a named  argument can be passed as named argument.
-- The key-value where the key is not compatible with a named argument can be passed as a pair of positional arguments.
   call dump2 .directory~of("key 1", "value 1","key 2", 2, key3:"value 3", key4:4)
a Directory (4 items)
'KEY3'  : 'value 3'
'KEY4'  :  4
'key 1' : 'value 1'
'key 2' :  2

-- Helper routine d() to create a directory
   call dump2 d(a1:1, a2:2)
a Directory (2 items)
'A1' :  1
'A2' :  2

-- Helper routine d() to create a directory
   call dump2 d("key 1", "value 1","key 2", 2, key3:"value 3", key4:4)
a Directory (4 items)
'KEY3'  : 'value 3'
'KEY4'  :  4
'key 1' : 'value 1'
'key 2' :  2


-- -----------------------------------------------------------------------------
-- Method ~do
-- -----------------------------------------------------------------------------

-- The ~do method now supports named arguments
-- Illustration with a doer of type routine
   {call dump2 .context~args; call dump2 .context~namedargs}~do(1, , 3, a1:1, a2:2)
an Array (shape [3], 2 items)
 1 :  1
 3 :  3
a Directory (2 items)
'A1' :  1
'A2' :  2

-- The ~do method now supports named arguments
-- Illustration with a doer of type method
   method = .MyClass~instancemethod("myMethod")
   method~do(.MyClass, 1, , 3, a1:1, a2:2)
an Array (shape [3], 2 items)
 1 :  1
 3 :  3
a Directory (2 items)
'A1' :  1
'A2' :  2


-- The ~do method now supports named arguments
-- Illustration with a doer of type message
   "myMethod"~do(.MyClass, 1, , 3, a1:1, a2:2)
an Array (shape [3], 2 items)
 1 :  1
 3 :  3
a Directory (2 items)
'A1' :  1
'A2' :  2


-- The ~do method now supports named arguments
-- Illustration with a doer of type closure
   {expose dummy; call dump2 .context~args; call dump2 .context~namedargs}~do(1, , 3, a1:1, a2:2)
an Array (shape [3], 2 items)
 1 :  1
 3 :  3
a Directory (2 items)
'A1' :  1
'A2' :  2


-- The ~do method now supports named arguments
-- Illustration with a doer of type coactivity
   {::co call dump2 .context~args; call dump2 .context~namedargs}~do(1, , 3, a1:1, a2:2)
an Array (shape [3], 2 items)
 1 :  1
 3 :  3
a Directory (2 items)
'A1' :  1
'A2' :  2


-- -----------------------------------------------------------------------------
-- Method ~doWith
-- -----------------------------------------------------------------------------

-- The ~doWith method now supports named arguments
-- Illustration with a doer of type routine
-- Here the abbreviation 'n' is supported because doWith forwards directly to callWith
   {call dump2 .context~args; call dump2 .context~namedargs}~doWith(v(1, , 3), n:d(a1:1, a2:2))
an Array (shape [3], 2 items)
 1 :  1
 3 :  3
a Directory (2 items)
'A1' :  1
'A2' :  2


-- The ~doWith method now supports named arguments
-- Illustration with a doer of type method
-- To rework: here, the abbreviation n: is not supported when calling doWith
   method = .MyClass~instancemethod("myMethod")
   method~doWith(.MyClass, v(1, , 3), namedArguments:d(a1:1, a2:2))
an Array (shape [3], 2 items)
 1 :  1
 3 :  3
a Directory (2 items)
'A1' :  1
'A2' :  2


-- The ~doWith method now supports named arguments
-- Illustration with a doer of type message
-- To rework: here, the abbreviation n: is not supported when calling doWith
   "myMethod"~doWith(.MyClass, v(1, , 3), namedArguments:d(a1:1, a2:2))
an Array (shape [3], 2 items)
 1 :  1
 3 :  3
a Directory (2 items)
'A1' :  1
'A2' :  2


-- The ~doWith method now supports named arguments
-- Illustration with a doer of type closure
-- To rework: here, the abbreviation n: is not supported when calling doWith
   {expose dummy; call dump2 .context~args; call dump2 .context~namedargs}~doWith(v(1, , 3), namedArguments:d(a1:1, a2:2))
an Array (shape [3], 2 items)
 1 :  1
 3 :  3
a Directory (2 items)
'A1' :  1
'A2' :  2


-- The ~doWith method now supports named arguments
-- Illustration with a doer of type coactivity
-- To rework: here, the abbreviation n: is not supported when calling doWith
   {::co call dump2 .context~args; call dump2 .context~namedargs}~doWith(v(1, , 3), namedArguments:d(a1:1, a2:2))
an Array (shape [3], 2 items)
 1 :  1
 3 :  3
a Directory (2 items)
'A1' :  1
'A2' :  2


-- -----------------------------------------------------------------------------
-- Method ~go
-- -----------------------------------------------------------------------------

-- The ~go method now supports named arguments
-- Illustration with a doer of type routine
   {call dump2 .context~args; call dump2 .context~namedargs}~go(1, , 3, a1:1, a2:2)
an Array (shape [3], 2 items)
 1 :  1
 3 :  3
a Directory (2 items)
'A1' :  1
'A2' :  2

-- The ~go method now supports named arguments
-- Illustration with a doer of type method
   method = .MyClass~instancemethod("myMethod")
   message = method~go(.MyClass, 1, , 3, a1:1, a2:2)
an Array (shape [3], 2 items)
 1 :  1
 3 :  3
a Directory (2 items)
'A1' :  1
'A2' :  2


-- The ~go method now supports named arguments
-- Illustration with a doer of type message
   message = "myMethod"~go(.MyClass, 1, , 3, a1:1, a2:2)
an Array (shape [3], 2 items)
 1 :  1
 3 :  3
a Directory (2 items)
'A1' :  1
'A2' :  2


-- The ~go method now supports named arguments
-- Illustration with a doer of type closure
   {expose dummy; call dump2 .context~args; call dump2 .context~namedargs}~go(1, , 3, a1:1, a2:2)
an Array (shape [3], 2 items)
 1 :  1
 3 :  3
a Directory (2 items)
'A1' :  1
'A2' :  2


-- The ~go method now supports named arguments
-- Illustration with a doer of type coactivity
   {::co call dump2 .context~args; call dump2 .context~namedargs}~go(1, , 3, a1:1, a2:2)
an Array (shape [3], 2 items)
 1 :  1
 3 :  3
a Directory (2 items)
'A1' :  1
'A2' :  2


-- -----------------------------------------------------------------------------
-- Method ~goWith
-- -----------------------------------------------------------------------------

-- The ~goWith method now supports named arguments
-- Illustration with a doer of type routine
-- Here the abbreviation 'n' is supported because goWith forwards directly to callWith
   {call dump2 .context~args; call dump2 .context~namedargs}~goWith(v(1, , 3), n:d(a1:1, a2:2))
an Array (shape [3], 2 items)
 1 :  1
 3 :  3
a Directory (2 items)
'A1' :  1
'A2' :  2


-- The ~goWith method now supports named arguments
-- Illustration with a doer of type method
-- To rework: here, the abbreviation n: is not supported when calling goWith
   method = .MyClass~instancemethod("myMethod")
   message = method~goWith(.MyClass, v(1, , 3), namedArguments:d(a1:1, a2:2))
an Array (shape [3], 2 items)
 1 :  1
 3 :  3
a Directory (2 items)
'A1' :  1
'A2' :  2


-- The ~goWith method now supports named arguments
-- Illustration with a doer of type message
-- To rework: here, the abbreviation n: is not supported when calling goWith
   message = "myMethod"~goWith(.MyClass, v(1, , 3), namedArguments:d(a1:1, a2:2))
an Array (shape [3], 2 items)
 1 :  1
 3 :  3
a Directory (2 items)
'A1' :  1
'A2' :  2


-- The ~goWith method now supports named arguments
-- Illustration with a doer of type closure
-- To rework: here, the abbreviation n: is not supported when calling goWith
   {expose dummy; call dump2 .context~args; call dump2 .context~namedargs}~goWith(v(1, , 3), namedArguments:d(a1:1, a2:2))
an Array (shape [3], 2 items)
 1 :  1
 3 :  3
a Directory (2 items)
'A1' :  1
'A2' :  2


-- The ~goWith method now supports named arguments
-- Illustration with a doer of type coactivity
-- To rework: here, the abbreviation n: is not supported when calling goWith
   {::co call dump2 .context~args; call dump2 .context~namedargs}~goWith(v(1, , 3), namedArguments:d(a1:1, a2:2))
an Array (shape [3], 2 items)
 1 :  1
 3 :  3
a Directory (2 items)
'A1' :  1
'A2' :  2


-- -----------------------------------------------------------------------------
-- Method ~partial
-- -----------------------------------------------------------------------------

-- The ~partial method now supports named arguments
-- Illustration, part 1 : the partial arguments
   {call dump2 .context~args; call dump2 .context~namedargs}~partial(1, , 3, , a1:1, a2:2)~()
an Array (shape [4], 2 items)
 1 :  1
 3 :  3
a Directory (2 items)
'A1' :  1
'A2' :  2

-- The ~partial method now supports named arguments
-- Illustration, part 2: the final arguments
   {call dump2 .context~args; call dump2 .context~namedargs}~partial(1, , 3, , a1:1, a2:2)~(2, ,5 , a1:10, a3:3)
an Array (shape [5], 4 items)
 1 :  1
 2 :  2
 3 :  3
 5 :  5
a Directory (3 items)
'A1' :  10
'A2' :  2
'A3' :  3

Ended coactivities: 0
