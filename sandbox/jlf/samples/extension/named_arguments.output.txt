********************************************************************************
*                          Call an internal procedure                          *
********************************************************************************

call myprocedure
    positional count=0 size=0
    named count=0


call myprocedure 1, 2, 3
    positional count=3 size=3
        1 : 1
        2 : 2
        3 : 3
    named count=0


call myprocedure 1, 2, a3:3
    positional count=2 size=2
        1 : 1
        2 : 2
    named count=1
        A3 : 3


call myprocedure 1, a2:2, a3:3
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 2
        A3 : 3


call myprocedure 1, a2:(2*5/4)**5, a3:.array~new(3,3)
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 97.65625
        A3 : an Array


call myprocedure , , 3, ,
    positional count=1 size=4
        3 : 3
    named count=0


call myprocedure , , 3, , a5:5
    positional count=1 size=4
        3 : 3
    named count=1
        A5 : 5


call myprocedure 1, 2, 3, {}
    positional count=4 size=4
        1 : 1
        2 : 2
        3 : 3
        4 : a RexxBlock
    named count=0


call myprocedure 1, 2, {}, a3:3
    positional count=3 size=3
        1 : 1
        2 : 2
        3 : a RexxBlock
    named count=1
        A3 : 3


call myprocedure 1, {}, a2:2, a3:3
    positional count=2 size=2
        1 : 1
        2 : a RexxBlock
    named count=2
        A2 : 2
        A3 : 3


********************************************************************************
*                    Continuation of the interpreted string                    *
********************************************************************************

call myprocedure 1, a2:2, a3:3
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 2
        A3 : 3


call myprocedure 1, a2 :2, a3:3
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 2
        A3 : 3


call myprocedure 1, a2: 2, a3:3
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 2
        A3 : 3


call myprocedure 1, a2:2, a3:3
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 2
        A3 : 3


********************************************************************************
*                     Continuation of the CALL instruction                     *
********************************************************************************

call myprocedure 1,,
     a2:2, a3:3
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 2
        A3 : 3


call myprocedure 1, a2,
     :2, a3:3
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 2
        A3 : 3


call myprocedure 1, a2:,
     2, a3:3
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 2
        A3 : 3


call myprocedure 1, a2:2,,
     a3:3
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 2
        A3 : 3


********************************************************************************
*                   Call an internal procedure as a function                   *
********************************************************************************

r = myprocedure()
    positional count=0 size=0
    named count=0


r = myprocedure(1, 2, 3)
    positional count=3 size=3
        1 : 1
        2 : 2
        3 : 3
    named count=0


r = myprocedure(1, 2, a3:3)
    positional count=2 size=2
        1 : 1
        2 : 2
    named count=1
        A3 : 3


r = myprocedure(1, a2:2, a3:3)
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 2
        A3 : 3


r = myprocedure(1, a2:(2*5/4)**5, a3:.array~new(3,3))
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 97.65625
        A3 : an Array


r = myprocedure( , , 3, ,)
    positional count=1 size=5
        3 : 3
    named count=0


r = myprocedure( , , 3, , a5:5)
    positional count=1 size=4
        3 : 3
    named count=1
        A5 : 5


r = myprocedure(1, 2, 3){}
    positional count=4 size=4
        1 : 1
        2 : 2
        3 : 3
        4 : a RexxBlock
    named count=0


r = myprocedure(1, 2, a3:3){}
    positional count=3 size=3
        1 : 1
        2 : 2
        3 : a RexxBlock
    named count=1
        A3 : 3


r = myprocedure(1, a2:2, a3:3){}
    positional count=2 size=2
        1 : 1
        2 : a RexxBlock
    named count=2
        A2 : 2
        A3 : 3


********************************************************************************
*                    Continuation of the interpreted string                    *
********************************************************************************

r=myprocedure(1, a2:2, a3:3)
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 2
        A3 : 3


r = myprocedure(1, a2 :2, a3:3)
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 2
        A3 : 3


r = myprocedure(1, a2: 2, a3:3)
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 2
        A3 : 3


r = myprocedure(1, a2:2, a3:3)
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 2
        A3 : 3


********************************************************************************
*                      Continuation of the function call                       *
********************************************************************************

r = myprocedure(1,,
     a2:2, a3:3)
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 2
        A3 : 3


r = myprocedure(1, a2,
     :2, a3:3)
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 2
        A3 : 3


r = myprocedure(1, a2:,
     2, a3:3)
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 2
        A3 : 3


r = myprocedure(1, a2:2,,
     a3:3)
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 2
        A3 : 3


********************************************************************************
*                                Call a routine                                *
********************************************************************************

call myroutine
    positional count=0 size=0
    named count=0


call myroutine 1, 2, 3
    positional count=3 size=3
        1 : 1
        2 : 2
        3 : 3
    named count=0


call myroutine 1, 2, a3:3
    positional count=2 size=2
        1 : 1
        2 : 2
    named count=1
        A3 : 3


call myroutine 1, a2:2, a3:3
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 2
        A3 : 3


call myroutine 1, a2:(2*5/4)**5, a3:.array~new(3,3)
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 97.65625
        A3 : an Array


call myroutine , , 3, ,
    positional count=1 size=4
        3 : 3
    named count=0


call myroutine , , 3, , a5:5
    positional count=1 size=4
        3 : 3
    named count=1
        A5 : 5


********************************************************************************
*                         Call a routine as a function                         *
********************************************************************************

r = myroutine()
    positional count=0 size=0
    named count=0


r = myroutine(1, 2, 3)
    positional count=3 size=3
        1 : 1
        2 : 2
        3 : 3
    named count=0


r = myroutine(1, 2, a3:3)
    positional count=2 size=2
        1 : 1
        2 : 2
    named count=1
        A3 : 3


r = myroutine(1, a2:2, a3:3)
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 2
        A3 : 3


r = myroutine(1, a2:(2*5/4)**5, a3:.array~new(3,3))
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 97.65625
        A3 : an Array


r = myroutine( , , 3, ,)
    positional count=1 size=5
        3 : 3
    named count=0


r = myroutine( , , 3, , a5:5)
    positional count=1 size=4
        3 : 3
    named count=1
        A5 : 5


r = myroutine(1, 2, 3){}
    positional count=4 size=4
        1 : 1
        2 : 2
        3 : 3
        4 : a RexxBlock
    named count=0


r = myroutine(1, 2, a3:3){}
    positional count=3 size=3
        1 : 1
        2 : 2
        3 : a RexxBlock
    named count=1
        A3 : 3


r = myroutine(1, a2:2, a3:3){}
    positional count=2 size=2
        1 : 1
        2 : a RexxBlock
    named count=2
        A2 : 2
        A3 : 3


********************************************************************************
*                      Call a method using a message term                      *
********************************************************************************

r = .myclass~mymethod
    positional count=0 size=0
    named count=0


r = .myclass~mymethod()
    positional count=0 size=0
    named count=0


r = .myclass~mymethod(1, 2, 3)
    positional count=3 size=3
        1 : 1
        2 : 2
        3 : 3
    named count=0


r = .myclass~mymethod(1, 2, a3:3)
    positional count=2 size=2
        1 : 1
        2 : 2
    named count=1
        A3 : 3


r = .myclass~mymethod(1, a2:2, a3:3)
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 2
        A3 : 3


r = .myclass~mymethod(1, a2:(2*5/4)**5, a3:.array~new(3,3))
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 97.65625
        A3 : an Array


r = .myclass~mymethod( , , 3, ,)
    positional count=1 size=5
        3 : 3
    named count=0


r = .myclass~mymethod( , , 3, , a5:5)
    positional count=1 size=4
        3 : 3
    named count=1
        A5 : 5


r = .myclass~mymethod(1, 2, 3){}
    positional count=4 size=4
        1 : 1
        2 : 2
        3 : 3
        4 : a RexxBlock
    named count=0


r = .myclass~mymethod(1, 2, a3:3){}
    positional count=3 size=3
        1 : 1
        2 : 2
        3 : a RexxBlock
    named count=1
        A3 : 3


r = .myclass~mymethod(1, a2:2, a3:3){}
    positional count=2 size=2
        1 : 1
        2 : a RexxBlock
    named count=2
        A2 : 2
        A3 : 3


********************************************************************************
*                              Forward a message                               *
********************************************************************************

r = .myclass~forwardArray
    forward message "mymethod" array ( 10, 20, 30, a1:40, a2:50 ) continue
    positional count=3 size=3
        1 : 10
        2 : 20
        3 : 30
    named count=2
        A1 : 40
        A2 : 50


r = .myclass~forwardNamedArguments
    forward message "mymethod" namedArguments (.directory~of(a1:1, a2:2)) continue
    positional count=0 size=0
    named count=2
        A1 : 1
        A2 : 2


r = .myclass~forwardPositionalNamedArguments
    forward message "mymethod" arguments ((1,2)) namedArguments (.directory~of(a1:1, a2:2)) continue
    positional count=2 size=2
        1 : 1
        2 : 2
    named count=2
        A1 : 1
        A2 : 2


r = .myclass~forwardNamedPositionalArguments
    forward message "mymethod" namedArguments (.directory~of(a1:1, a2:2)) arguments ((1,2)) continue
    positional count=2 size=2
        1 : 1
        2 : 2
    named count=2
        A1 : 1
        A2 : 2


********************************************************************************
*                               Instruction USE                                *
********************************************************************************

call usePositionalNamed 1, , 3, , a5:5, a6:6
    positional count=2 size=4
        1 : 1
        3 : 3
    named count=2
        A5 : 5
        A6 : 6
    use arg p1, p2, p3, p4
    use named arg a5, a6
    variables count=4
        A5 : 5
        A6 : 6
        P1 : 1
        P3 : 3


call useStrictPositionalNamed 1, , 3, , a5:5, a6:6
    positional count=2 size=4
        1 : 1
        3 : 3
    named count=2
        A5 : 5
        A6 : 6
    use strict arg p1, p2=2, p3, p4=4
    use strict named arg a5, a6
    variables count=6
        A5 : 5
        A6 : 6
        P1 : 1
        P2 : 2
        P3 : 3
        P4 : 4


call useNamed_SimpleSymbol v1:1, v3:3, v5:5
    positional count=0 size=0
    named count=3
        V1 : 1
        V3 : 3
        V5 : 5
    use named arg v1, v2=2
    variables count=2
        V1 : 1
        V2 : 2


call useAutoNamed_SimpleSymbol v1:1, v3:3, v5:5
    positional count=0 size=0
    named count=3
        V1 : 1
        V3 : 3
        V5 : 5
    use auto named arg v1, v2=2
    variables count=4
        V1 : 1
        V2 : 2
        V3 : 3
        V5 : 5


call useNamed_Stem_CompoundSymbol stem.v1:1, stem.:0, stem.v3:3, stem.v5:5
    positional count=0 size=0
    named count=4
        STEM. : 0
        STEM.V1 : 1
        STEM.V3 : 3
        STEM.V5 : 5
    use named arg stem., stem.v1, stem.v2=2
    variables count=1
        STEM. : 0
    stem count=2
        V1 : 1
        V2 : 2


call useAutoNamed_Stem_CompoundSymbol stem.v1:1, stem.:0, stem.v3:3, stem.v5:5
    positional count=0 size=0
    named count=4
        STEM. : 0
        STEM.V1 : 1
        STEM.V3 : 3
        STEM.V5 : 5
    use auto named arg stem., stem.v1, stem.v2=2
    variables count=1
        STEM. : 0
    stem count=2
        V1 : 1
        V2 : 2
Expected: The automatic variables stem.v3 and stem.v5 should be created... TODO


********************************************************************************
*                                Unknown method                                *
********************************************************************************

r = .myclass~foo
    method 'unknown'
        positional count=2 size=2
            1 : FOO
            2 : an Array
        named count=1
            NAMEDARGUMENTS : The NIL object
    method 'unknown' forward to (.myfooclass) message (name) arguments (arguments) namedArguments (namedArguments)
        positional count=0 size=0
        named count=0


r = .myclass~foo()
    method 'unknown'
        positional count=2 size=2
            1 : FOO
            2 : an Array
        named count=1
            NAMEDARGUMENTS : The NIL object
    method 'unknown' forward to (.myfooclass) message (name) arguments (arguments) namedArguments (namedArguments)
        positional count=0 size=0
        named count=0


r = .myclass~foo(1, 2, 3)
    method 'unknown'
        positional count=2 size=2
            1 : FOO
            2 : an Array
        named count=1
            NAMEDARGUMENTS : The NIL object
    method 'unknown' forward to (.myfooclass) message (name) arguments (arguments) namedArguments (namedArguments)
        positional count=3 size=3
            1 : 1
            2 : 2
            3 : 3
        named count=0


r = .myclass~foo(1, 2, a3:3)
    method 'unknown'
        positional count=2 size=2
            1 : FOO
            2 : an Array
        named count=1
            NAMEDARGUMENTS : a Directory
    method 'unknown' forward to (.myfooclass) message (name) arguments (arguments) namedArguments (namedArguments)
        positional count=2 size=2
            1 : 1
            2 : 2
        named count=1
            A3 : 3


r = .myclass~foo(1, a2:2, a3:3)
    method 'unknown'
        positional count=2 size=2
            1 : FOO
            2 : an Array
        named count=1
            NAMEDARGUMENTS : a Directory
    method 'unknown' forward to (.myfooclass) message (name) arguments (arguments) namedArguments (namedArguments)
        positional count=1 size=1
            1 : 1
        named count=2
            A2 : 2
            A3 : 3


r = .myclass~foo(1, a2:(2*5/4)**5, a3:.array~new(3,3))
    method 'unknown'
        positional count=2 size=2
            1 : FOO
            2 : an Array
        named count=1
            NAMEDARGUMENTS : a Directory
    method 'unknown' forward to (.myfooclass) message (name) arguments (arguments) namedArguments (namedArguments)
        positional count=1 size=1
            1 : 1
        named count=2
            A2 : 97.65625
            A3 : an Array


r = .myclass~foo( , , 3, ,)
    method 'unknown'
        positional count=2 size=2
            1 : FOO
            2 : an Array
        named count=1
            NAMEDARGUMENTS : The NIL object
    method 'unknown' forward to (.myfooclass) message (name) arguments (arguments) namedArguments (namedArguments)
        positional count=1 size=5
            3 : 3
        named count=0


r = .myclass~foo( , , 3, , a5:5)
    method 'unknown'
        positional count=2 size=2
            1 : FOO
            2 : an Array
        named count=1
            NAMEDARGUMENTS : a Directory
    method 'unknown' forward to (.myfooclass) message (name) arguments (arguments) namedArguments (namedArguments)
        positional count=1 size=4
            3 : 3
        named count=1
            A5 : 5


r = .myclass~foo(1, 2, 3){}
    method 'unknown'
        positional count=2 size=2
            1 : FOO
            2 : an Array
        named count=1
            NAMEDARGUMENTS : The NIL object
    method 'unknown' forward to (.myfooclass) message (name) arguments (arguments) namedArguments (namedArguments)
        positional count=4 size=4
            1 : 1
            2 : 2
            3 : 3
            4 : a RexxBlock
        named count=0


r = .myclass~foo(1, 2, a3:3){}
    method 'unknown'
        positional count=2 size=2
            1 : FOO
            2 : an Array
        named count=1
            NAMEDARGUMENTS : a Directory
    method 'unknown' forward to (.myfooclass) message (name) arguments (arguments) namedArguments (namedArguments)
        positional count=3 size=3
            1 : 1
            2 : 2
            3 : a RexxBlock
        named count=1
            A3 : 3


r = .myclass~foo(1, a2:2, a3:3){}
    method 'unknown'
        positional count=2 size=2
            1 : FOO
            2 : an Array
        named count=1
            NAMEDARGUMENTS : a Directory
    method 'unknown' forward to (.myfooclass) message (name) arguments (arguments) namedArguments (namedArguments)
        positional count=2 size=2
            1 : 1
            2 : a RexxBlock
        named count=2
            A2 : 2
            A3 : 3


********************************************************************************
*                            Run a floating method                             *
********************************************************************************

r = .myclass~myrun(.methods["MYFLOATINGMETHOD"])
    positional count=0 size=0
    named count=0


r = .myclass~myrun(.methods["MYFLOATINGMETHOD"], "I")
    positional count=0 size=0
    named count=0


r = .myclass~myrun(.methods["MYFLOATINGMETHOD"], "I", 1, 2, 3)
    positional count=3 size=3
        1 : 1
        2 : 2
        3 : 3
    named count=0


r = .myclass~myrun(.methods["MYFLOATINGMETHOD"], "I", 1, 2, a3:3)
    positional count=2 size=2
        1 : 1
        2 : 2
    named count=1
        A3 : 3


r = .myclass~myrun(.methods["MYFLOATINGMETHOD"], "I", 1, a2:2, a3:3)
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 2
        A3 : 3


r = .myclass~myrun(.methods["MYFLOATINGMETHOD"], "I", 1, a2:(2*5/4)**5, a3:.array~new(3,3))
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 97.65625
        A3 : an Array


r = .myclass~myrun(.methods["MYFLOATINGMETHOD"], "I", , , 3, ,)
    positional count=1 size=5
        3 : 3
    named count=0


r = .myclass~myrun(.methods["MYFLOATINGMETHOD"], "I", , , 3, , a5:5)
    positional count=1 size=4
        3 : 3
    named count=1
        A5 : 5


r = .myclass~myrun(.methods["MYFLOATINGMETHOD"], "I", 1, 2, 3){}
    positional count=4 size=4
        1 : 1
        2 : 2
        3 : 3
        4 : a RexxBlock
    named count=0


r = .myclass~myrun(.methods["MYFLOATINGMETHOD"], "I", 1, 2, a3:3){}
    positional count=3 size=3
        1 : 1
        2 : 2
        3 : a RexxBlock
    named count=1
        A3 : 3


r = .myclass~myrun(.methods["MYFLOATINGMETHOD"], "I", 1, a2:2, a3:3){}
    positional count=2 size=2
        1 : 1
        2 : a RexxBlock
    named count=2
        A2 : 2
        A3 : 3


r = .myclass~myrun(.methods["MYFLOATINGMETHOD"], "A", .array~new)
    positional count=0 size=0
    named count=0


r = .myclass~myrun(.methods["MYFLOATINGMETHOD"], "A", (1, 2, 3))
    positional count=3 size=3
        1 : 1
        2 : 2
        3 : 3
    named count=0


r = .myclass~myrun(.methods["MYFLOATINGMETHOD"], "A", (1, 2), "D", .directory~of(a3:3))
    positional count=2 size=2
        1 : 1
        2 : 2
    named count=1
        A3 : 3


r = .myclass~myrun(.methods["MYFLOATINGMETHOD"], "A", .array~of(1), "D", .directory~of(a2:2, a3:3))
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 2
        A3 : 3


r = .myclass~myrun(.methods["MYFLOATINGMETHOD"], "A", .array~of(1), "D", .directory~of(a2:(2*5/4)**5, a3:.array~new(3,3)))
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 97.65625
        A3 : an Array


r = .myclass~myrun(.methods["MYFLOATINGMETHOD"], "A", ( , , 3, ,))
    positional count=1 size=5
        3 : 3
    named count=0


r = .myclass~myrun(.methods["MYFLOATINGMETHOD"], "A", ( , , 3, ,), "D", .directory~of(a5:5))
    positional count=1 size=5
        3 : 3
    named count=1
        A5 : 5


********************************************************************************
*                         Call a method using sendWith                         *
********************************************************************************

r = .myclass~sendWith("mymethod", .array~new)
    positional count=0 size=0
    named count=0


r = .myclass~sendWith("mymethod", (1, 2, 3))
    positional count=3 size=3
        1 : 1
        2 : 2
        3 : 3
    named count=0


r = .myclass~sendWith("mymethod", (1, 2), namedArguments:.directory~of(a3:3))
    positional count=2 size=2
        1 : 1
        2 : 2
    named count=1
        A3 : 3


r = .myclass~sendWith("mymethod", .array~of(1), namedArguments:.directory~of(a2:2, a3:3))
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 2
        A3 : 3


r = .myclass~sendWith("mymethod", .array~of(1), namedArguments:.directory~of(a2:(2*5/4)**5, a3:.array~new(3,3)))
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 97.65625
        A3 : an Array


r = .myclass~sendWith("mymethod", ( , , 3, ,))
    positional count=1 size=5
        3 : 3
    named count=0


r = .myclass~sendWith("mymethod", ( , , 3, ,), namedArguments:.directory~of(a5:5))
    positional count=1 size=5
        3 : 3
    named count=1
        A5 : 5


r = .myclass~sendWith("mymethod", (1, 2, 3, {}))
    positional count=4 size=4
        1 : 1
        2 : 2
        3 : 3
        4 : a RexxBlock
    named count=0


r = .myclass~sendWith("mymethod", (1, 2, {}), namedArguments:.directory~of(a3:3))
    positional count=3 size=3
        1 : 1
        2 : 2
        3 : a RexxBlock
    named count=1
        A3 : 3


r = .myclass~sendWith("mymethod", (1, {}), namedArguments:.directory~of(a2:2, a3:3))
    positional count=2 size=2
        1 : 1
        2 : a RexxBlock
    named count=2
        A2 : 2
        A3 : 3


********************************************************************************
*                                 Call a block                                 *
********************************************************************************

{call sayArg .context}~rawExecutable~call
    positional count=0 size=0
    named count=0


{call sayArg .context}~rawExecutable~call()
    positional count=0 size=0
    named count=0


{call sayArg .context}~rawExecutable~call(1, 2, 3)
    positional count=3 size=3
        1 : 1
        2 : 2
        3 : 3
    named count=0


{call sayArg .context}~rawExecutable~call(1, 2, a3:3)
    positional count=2 size=2
        1 : 1
        2 : 2
    named count=1
        A3 : 3


{call sayArg .context}~rawExecutable~call(1, a2:2, a3:3)
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 2
        A3 : 3


{call sayArg .context}~rawExecutable~call(1, a2:(2*5/4)**5, a3:.array~new(3,3))
    positional count=1 size=1
        1 : 1
    named count=2
        A2 : 97.65625
        A3 : an Array


{call sayArg .context}~rawExecutable~call( , , 3, ,)
    positional count=1 size=5
        3 : 3
    named count=0


{call sayArg .context}~rawExecutable~call( , , 3, , a5:5)
    positional count=1 size=4
        3 : 3
    named count=1
        A5 : 5


{call sayArg .context}~rawExecutable~call(1, 2, 3){}
    positional count=4 size=4
        1 : 1
        2 : 2
        3 : 3
        4 : a RexxBlock
    named count=0


{call sayArg .context}~rawExecutable~call(1, 2, a3:3){}
    positional count=3 size=3
        1 : 1
        2 : 2
        3 : a RexxBlock
    named count=1
        A3 : 3


{call sayArg .context}~rawExecutable~call(1, a2:2, a3:3){}
    positional count=2 size=2
        1 : 1
        2 : a RexxBlock
    named count=2
        A2 : 2
        A3 : 3


********************************************************************************
*                           Trapped expected errors                            *
********************************************************************************

call myprocedure , , 3, , a5:5,
    positional count=1 size=4
        3 : 3
    named count=1
        A5 : 5
Expected: Should raise an error because of the trailing comma (TODO)


call myroutine , , 3, , a5:5,
    positional count=1 size=4
        3 : 3
    named count=1
        A5 : 5
Expected: Should raise an error because of the trailing comma (TODO)


call myprocedure .envSymbol:1
    positional count=0 size=0
    named count=1
        .ENVSYMBOL : 1
Expected: Should raise an error because an environment symbol is not allowed


call myprocedure 1, a2:2, a3:
    [trapped] Named argument: expected expression after colon
    [trapped] Code= 35.900
Expected: Error 35.900:  Named argument: expected expression after colon


call myprocedure 1, a2:2, 3
    [trapped] Named argument: expected symbol followed by colon
    [trapped] Code= 35.900
Expected: Error 35.900:  Named argument: expected symbol followed by colon


call myprocedure a1:1, a1:2 Error 35.900:  Named argument: the name "A1" is passed more than once
    [trapped] Named argument: The name "A1" is passed more than once
    [trapped] Code= 35.900


call myprocedure a1:1, , a3:3
    [trapped] Named argument: expected symbol followed by colon
    [trapped] Code= 35.900
Expected: Error 35.900: Named argument: expected symbol followed by colon


call myprocedure instance~method:1
    [trapped] Symbol expected after superclass colon (:)
    [trapped] Code= 20.917
Expected: Error 20.917: Symbol expected after superclass colon (:)


r = .myclass~sendWith("mymethod")
    [trapped] Missing argument in method; argument 2 is required
    [trapped] Code= 93.903
Expected: Error 93.903: Missing argument in method; argument 2 is required


r = .myclass~sendWith("mymethod", .object /* not an array */, namedArguments:.directory~of(a3:3))
    [trapped] Unable to convert object "The Object class" to a single-dimensional array value
    [trapped] Code= 98.913
Expected: Error 98.913: Unable to convert object "The Object class" to a single-dimensional array value


r = .myclass~sendWith("mymethod", (1, 2), namedArguments: "not a directory")
    [trapped] sendWith: The value of NAMEDARGUMENTS must be a directory or NIL
    [trapped] Code= 98.900
Expected: Error 98.900: sendWith: The value of NAMEDARGUMENTS must be a directory or NIL


m = .method~new("", 'forward message "mymethod" namedArguments continue')
    [trapped] Incorrect expression detected at "CONTINUE"
    [trapped] Code= 35.1
Expected: Error 35.1:    Incorrect expression detected at "CONTINUE"


m = .method~new("", 'forward message "mymethod" namedArguments')
    [trapped] Missing expression following NAMEDARGUMENTS keyword of a FORWARD instruction
    [trapped] Code= 35.900
Expected: Error 35.900:  Missing expression following NAMEDARGUMENTS keyword of a FORWARD instruction


m = .method~new("", 'forward message "mymethod" array ( 10, 20, 30, a1:40, a2:50 ) namedArguments (.directory~of(a1:1, a2:2) continue')
    [trapped] Duplicate [NAMED]ARGUMENTS or ARRAY keyword found
    [trapped] Code= 25.918
Expected: Error 25.918: Duplicate [NAMED]ARGUMENTS or ARRAY keyword found


r = .myclass~forwardNamedArgumentsNotDirectory
    forward message "mymethod" namedArguments ("not a directory") continue
    [trapped] FORWARD: The value of 'NAMEDARGUMENTS' must be a directory or NIL
    [trapped] Code= 98.900
Expected: Error 98.900: FORWARD: The value of 'NAMEDARGUMENTS' must be a directory or NIL


r = .myclass~myrun(.methods["MYFLOATINGMETHOD"], "A", (1, 2, 3)){}
    [trapped] Method argument 4 must have a string value
    [trapped] Code= 93.938
Expected: Error 93.938: Method argument 4 must have a string value


r = .myclass~myrun(.methods["MYFLOATINGMETHOD"], "A", (1, 2), "D", .directory~of(a3:3)){}
    [trapped] Too many positional arguments in invocation of method; 5 expected
    [trapped] Code= 93.902
Expected: Error 93.902: Too many arguments in invocation of method; 5 expected


r = .myclass~myrun(.methods["MYFLOATINGMETHOD"], "A", .array~of(1), "D", .directory~of(a2:2, a3:3)){}
    [trapped] Too many positional arguments in invocation of method; 5 expected
    [trapped] Code= 93.902
Expected: Error 93.902: Too many arguments in invocation of method; 5 expected


call useNamed_EnvironmentSymbolNotAllowed
    use named arg .envSymbol
    [trapped] Variable symbol must not start with a "."; found ".ENVSYMBOL"
    [trapped] Code= 31.3
Expected: Error 31.3: Variable symbol must not start with a "."; found ".ENVSYMBOL"


call useNamed_MessageTermNotAllowed
    use named arg instance~method
    [trapped] The USE NAMED instruction requires a comma-separated list of variable symbols
    [trapped] Code= 87.2
Expected: Error 87.2: The USE NAMED instruction requires a comma-separated list of variable symbols


call useNamed_SkippedArgumentNotAllowed
    use named arg n1,,n3
    [trapped] Skipped variables are not allowed by the USE NAMED instruction
    [trapped] Code= 87.1
Expected: Error 87.1: Skipped variables are not allowed by the USE NAMED instruction


