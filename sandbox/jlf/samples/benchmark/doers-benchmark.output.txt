     2 *-* count = 10
     3 *-* call run count, .context~package~findRoutine("emptyRoutine")
 0.1250  0.1250  0.1100  0.1250  0.1250  0.1400  0.1410  0.1250  0.1090  0.1250 mean= 0.1250
     4 *-* call run count, {/**/}
 0.2350  0.2190  0.1870  0.1250  0.1250  0.1250  0.1250  0.1250  0.1250  0.1250 mean= 0.1516
     5 *-* call run count, {::r}
 0.1250  0.1410  0.1400  0.1250  0.1250  0.1250  0.1250  0.1410  0.1250  0.1250 mean= 0.1297
     6 *-* call run count, .methods["EMPTYMETHOD"]
 0.0310  0.0310  0.0160  0.0310  0.0160  0.0310  0.0310  0.0160  0.0310  0.0320 mean= 0.0266
     7 *-* call run count, {::m}
 0.0310  0.0310  0.0310  0.0320  0.0310  0.0310  0.0310  0.0320  0.0310  0.0310 mean= 0.0312
     9 *-* call run count, {::r.c}
 0.0470  0.0310  0.0310  0.0320  0.0470  0.0460  0.0630  0.0620  0.0470  0.0470 mean= 0.0453
    11 *-* call run count, {::m.c}~doer(.nil)
 0.0780  0.0470  0.0470  0.0470  0.0470  0.0620  0.0320  0.0310  0.0310  0.0310 mean= 0.0453
    13 *-* call run count, .context~package~findRoutine("myRoutine")
.......... 0.1250 .......... 0.1250 .......... 0.1250 .......... 0.1410 .......... 0.1410 .......... 0.1250 .......... 0.1250 .......... 0.1250 .......... 0.1250 .......... 0.1250 mean= 0.1282
    14 *-* call run count, {if value // 1000 == 0 then call charout ,"."}
.......... 0.2340 .......... 0.1410 .......... 0.1560 .......... 0.1250 .......... 0.1400 .......... 0.1250 .......... 0.1410 .......... 0.1410 .......... 0.1250 .......... 0.1400 mean= 0.1468
    15 *-* call run count, {::r if value // 1000 == 0 then call charout ,"."}
.......... 0.1250 .......... 0.1410 .......... 0.1250 .......... 0.1410 .......... 0.2500 .......... 0.2180 .......... 0.1720 .......... 0.1410 .......... 0.1400 .......... 0.1410 mean= 0.1594
    16 *-* call run count, .methods["MYMETHOD"]
.......... 0.0310 .......... 0.0320 .......... 0.0310 .......... 0.0310 .......... 0.0310 .......... 0.0320 .......... 0.0310 .......... 0.0310 .......... 0.0310 .......... 0.0320 mean= 0.0313
    17 *-* call run count, {::m if self // 1000 == 0 then call charout ,"."}
.......... 0.0310 .......... 0.0470 .......... 0.0310 .......... 0.0470 .......... 0.0310 .......... 0.0470 .......... 0.0470 .......... 0.0470 .......... 0.0310 .......... 0.0620 mean= 0.0421
    19 *-* call run count, {::r.c do forever ; args = .yield[]; value = args[1] ; if value // 1000 == 0 then call charout ,"." ; end}
.......... 0.4690 .......... 0.4380 .......... 0.4530 .......... 0.4370 .......... 0.4380 .......... 0.5000 .......... 0.4690 .......... 0.4840 .......... 0.4530 .......... 0.6560 mean= 0.4797
    20 *-* call run count, {::m.c do forever ; args = .yield[]; value = args[1] ; if value // 1000 == 0 then call charout ,"." ; end}~doer(.nil)
.......... 0.4070 .......... 0.4370 .......... 0.3750 .......... 0.3590 .......... 0.3600 .......... 0.4370 .......... 0.4220 .......... 0.3280 .......... 0.4220 .......... 0.4060 mean= 0.3953
    22 *-* call run count, .myCoactivity~new
.......... 0.2970 .......... 0.3440 .......... 0.2500 .......... 0.2810 .......... 0.2500 .......... 0.3440 .......... 0.2660 .......... 0.2340 .......... 0.4060 .......... 0.3440 mean= 0.3016
    24 *-* trace O
100010000 literal {return 2 * arg(1)} before loop, called 10000 times :  0.1560
100010000 literal {return 2 * arg(1)} in loop, called 10000 times :  0.1880
100010000 literal {:return 2 * arg(1)} before loop, called 10000 times :  0.1560
100010000 literal {:return 2 * arg(1)} in loop, called 10000 times :  4.1090
100010000 literal {::m return 2 * self} before loop, called 10000 times :  0.0470
100010000 literal {::m return 2 * self} in loop, called 10000 times :  4.0470
100010000 literal {::cl expose multiplier ; return multiplier * arg(1)} before loop, called 10000 times :  0.0160
100010000 literal {::cl expose multiplier ; return multiplier * arg(1)} in loop, called 10000 times :  9.1560
Ended coactivities: 1
