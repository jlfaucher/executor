     3 *-* count = 10
     4 *-* call run count, .context~package~findRoutine("emptyRoutine")
 0.1250  0.1410  0.1250  0.1250  0.1250  0.1250  0.1250  0.1250  0.1250  0.1090 mean= 0.1250
     5 *-* call run count, {/**/}
 0.1720  0.1880  0.1720  0.1560  0.1410  0.1400  0.1560  0.1250  0.1250  0.1410 mean= 0.1516
     6 *-* call run count, {::r}
 0.1410  0.1400  0.1250  0.1250  0.1880  0.1250  0.1250  0.1400  0.1250  0.1410 mean= 0.1375
     7 *-* call run count, .methods["EMPTYMETHOD"]
 0.0160  0.0310  0.0310  0.0310  0.0160  0.0310  0.0320  0.0310  0.0310  0.0310 mean= 0.0281
     8 *-* call run count, {::m}
 0.0320  0.0310  0.0310  0.0310  0.0470  0.0310  0.0320  0.0310  0.0310  0.0310 mean= 0.0328
    10 *-* call run count, {::r.c}
 0.0470  0.0320  0.0460  0.0470  0.0320  0.0310  0.0470  0.0310  0.0620  0.0320 mean= 0.0407
    12 *-* call run count, {::m.c}~doer(.nil)
 0.0470  0.0310  0.0310  0.0310  0.0470  0.0310  0.0320  0.0310  0.0310  0.0310 mean= 0.0343
    14 *-* call run count, .context~package~findRoutine("myRoutine")
.......... 0.1410 .......... 0.1250 .......... 0.1250 .......... 0.1250 .......... 0.1410 .......... 0.1400 .......... 0.1250 .......... 0.1570 .......... 0.1560 .......... 0.1400 mean= 0.1375
    15 *-* call run count, {if value // 1000 == 0 then call charout ,"."}
.......... 0.1410 .......... 0.1410 .......... 0.1400 .......... 0.1570 .......... 0.1560 .......... 0.1400 .......... 0.1570 .......... 0.1560 .......... 0.1560 .......... 0.1410 mean= 0.1485
    16 *-* call run count, {::r if value // 1000 == 0 then call charout ,"."}
.......... 0.1720 .......... 0.1400 .......... 0.1570 .......... 0.1400 .......... 0.1410 .......... 0.1400 .......... 0.1410 .......... 0.1880 .......... 0.1560 .......... 0.1400 mean= 0.1515
    17 *-* call run count, .methods["MYMETHOD"]
.......... 0.0470 .......... 0.0320 .......... 0.0310 .......... 0.0310 .......... 0.0310 .......... 0.0320 .......... 0.0310 .......... 0.0470 .......... 0.0310 .......... 0.0310 mean= 0.0344
    18 *-* call run count, {::m if self // 1000 == 0 then call charout ,"."}
.......... 0.0310 .......... 0.0470 .......... 0.0470 .......... 0.0470 .......... 0.0470 .......... 0.0310 .......... 0.0470 .......... 0.0310 .......... 0.0470 .......... 0.0470 mean= 0.0422
    20 *-* call run count, {::r.c do forever ; args = .yield[]; value = args[1] ; if value // 1000 == 0 then call charout ,"." ; end}
.......... 0.5470 .......... 0.4220 .......... 0.5150 .......... 0.5160 .......... 0.5000 .......... 0.4380 .......... 0.5150 .......... 0.4380 .......... 0.5150 .......... 0.4690 mean= 0.4875
    21 *-* call run count, {::m.c do forever ; args = .yield[]; value = args[1] ; if value // 1000 == 0 then call charout ,"." ; end}~doer(.nil)
.......... 0.5310 .......... 0.5000 .......... 0.5000 .......... 0.4850 .......... 0.5150 .......... 0.5000 .......... 0.5160 .......... 0.4840 .......... 0.5160 .......... 0.5160 mean= 0.5063
    23 *-* call run count, .myCoactivity~new
.......... 0.3280 .......... 0.2970 .......... 0.2960 .......... 0.2970 .......... 0.2970 .......... 0.3130 .......... 0.2970 .......... 0.2960 .......... 0.2970 .......... 0.2970 mean= 0.3015
    25 *-* trace O
4.00003000E+10 200000 loops, no call :  0.1250
4.00003000E+10 routine double, called 200000 times :  2.3910
4.00003000E+10 literal {return 2 * arg(1)}~doer before loop, called with ~do 200000 times :  2.8120
4.00003000E+10 literal {return 2 * arg(1)} before loop, called with ~do 200000 times :  3.1720
4.00003000E+10 literal {return 2 * arg(1)} before loop, called with ~() 200000 times :  3.2500
4.00003000E+10 literal {return 2 * arg(1)} in loop, called with ~do 200000 times :  3.8750
4.00003000E+10 literal {return 2 * arg(1)} in loop, called with ~() 200000 times :  3.9690
4.00003000E+10 literal {:return 2 * arg(1)} before loop, called with ~do 200000 times :  3.0780
4.00003000E+10 literal {:return 2 * arg(1)} before loop, called with ~() 200000 times :  3.4220
4.00003000E+10 literal {:return 2 * arg(1)} in loop, called with ~do 200000 times :  3.7340
4.00003000E+10 literal {:return 2 * arg(1)} in loop, called with ~() 200000 times :  3.7350
4.00003000E+10 literal {::m return 2 * self} before loop, called with ~do 200000 times :  0.9530
4.00003000E+10 literal {::m return 2 * self} before loop, called with ~() 200000 times :  1.1090
4.00003000E+10 literal {::m return 2 * self} in loop, called with ~do 200000 times :  1.7500
4.00003000E+10 literal {::m return 2 * self} in loop, called with ~() 200000 times :  1.8280
4.00003000E+10 literal {::cl expose multiplier ; return multiplier * arg(1)} before loop, called with ~do 200000 times :  0.6720
4.00003000E+10 literal {::cl expose multiplier ; return multiplier * arg(1)} before loop, called with ~() 200000 times :  0.8280
4.00003000E+10 literal {::cl expose multiplier ; return multiplier * arg(1)} in loop, called with ~do 200000 times :  6.4070
4.00003000E+10 literal {::cl expose multiplier ; return multiplier * arg(1)} in loop, called with ~() 200000 times :  6.3900
Ended coactivities: 1
