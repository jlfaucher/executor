     2 *-* count = 10
     3 *-* call run count, .context~package~findRoutine("emptyRoutine")
 0.1560  0.1240  0.1250  0.1090  0.1410  0.2650  0.1240  0.1090  0.1250  0.1560 mean= 0.1434
     4 *-* call run count, {/**/}
 0.1400  0.1400  0.2030  0.1250  0.1870  0.1250  0.1550  0.1560  0.1720  0.1710 mean= 0.1574
     5 *-* call run count, {::r}
 0.2180  0.1720  0.1400  0.2030  0.1710  0.1410  0.1710  0.1400  0.1250  0.1400 mean= 0.1621
     6 *-* call run count, .methods["EMPTYMETHOD"]
 0.0320  0.0310  0.0150  0.0310  0.0630  0.0470  0.0460  0.0470  0.0470  0.0310 mean= 0.0390
     7 *-* call run count, {::m}
 0.0470  0.0470  0.0460  0.0320  0.0460  0.0470  0.0310  0.0470  0.0310  0.0470 mean= 0.0421
     9 *-* call run count, {::r.c}
 0.0780  0.0620  0.0780  0.0620  0.0780  0.0780  0.0780  0.0780  0.0780  0.0940 mean= 0.0764
    11 *-* call run count, {::m.c}~doer(.nil)
 0.0780  0.0620  0.0470  0.0470  0.0460  0.0470  0.0620  0.0160  0.0310  0.0310 mean= 0.0467
    13 *-* call run count, .context~package~findRoutine("myRoutine")
.......... 0.1410 .......... 0.1240 .......... 0.1410 .......... 0.1250 .......... 0.1400 .......... 0.1400 .......... 0.1250 .......... 0.1400 .......... 0.1250 .......... 0.1560 mean= 0.1372
    14 *-* call run count, {if value // 1000 == 0 then call charout ,"."}
.......... 0.1560 .......... 0.1250 .......... 0.1560 .......... 0.1240 .......... 0.1400 .......... 0.1410 .......... 0.1400 .......... 0.1250 .......... 0.1400 .......... 0.1250 mean= 0.1372
    15 *-* call run count, {::r if value // 1000 == 0 then call charout ,"."}
.......... 0.1400 .......... 0.1400 .......... 0.2190 .......... 0.1710 .......... 0.1400 .......... 0.1250 .......... 0.1400 .......... 0.1410 .......... 0.1550 .......... 0.1410 mean= 0.1512
    16 *-* call run count, .methods["MYMETHOD"]
.......... 0.0150 .......... 0.0320 .......... 0.0460 .......... 0.0310 .......... 0.0160 .......... 0.0470 .......... 0.0310 .......... 0.0310 .......... 0.0310 .......... 0.0320 mean= 0.0312
    17 *-* call run count, {::m if self // 1000 == 0 then call charout ,"."}
.......... 0.0310 .......... 0.0460 .......... 0.0320 .......... 0.0460 .......... 0.0320 .......... 0.0460 .......... 0.0310 .......... 0.0470 .......... 0.0470 .......... 0.0310 mean= 0.0389
    19 *-* call run count, {::r.c do forever ; args = .yield[]; value = args[1] ; if value // 1000 == 0 then call charout ,"." ; end}
.......... 0.5930 .......... 0.8570 .......... 0.8730 .......... 0.7480 .......... 0.7170 .......... 0.7330 .......... 0.6700 .......... 0.7480 .......... 0.8730 .......... 0.7010 mean= 0.7513
    20 *-* call run count, {::m.c do forever ; args = .yield[]; value = args[1] ; if value // 1000 == 0 then call charout ,"." ; end}~doer(.nil)
.......... 0.6240 .......... 0.4830 .......... 0.4370 .......... 0.3890 .......... 0.6390 .......... 0.4060 .......... 0.5140 .......... 0.5610 .......... 0.4050 .......... 0.4680 mean= 0.4926
    22 *-* call run count, .myCoactivity~new
.......... 0.6860 .......... 0.4990 .......... 0.4830 .......... 0.4360 .......... 0.3280 .......... 0.4670 .......... 0.4680 .......... 0.4210 .......... 0.2490 .......... 0.3430 mean= 0.4380
    24 *-* trace O
100010000 literal {return 2 * arg(1)} before loop, called 10000 times :  0.1560
100010000 literal {return 2 * arg(1)} in loop, called 10000 times :  0.1870
100010000 literal {:return 2 * arg(1)} before loop, called 10000 times :  0.1720
100010000 literal {:return 2 * arg(1)} in loop, called 10000 times :  0.2330
100010000 literal {::m return 2 * self} before loop, called 10000 times :  0.0780
100010000 literal {::m return 2 * self} in loop, called 10000 times :  0.0940
100010000 literal {::cl expose multiplier ; return multiplier * arg(1)} before loop, called 10000 times :  0.0310
100010000 literal {::cl expose multiplier ; return multiplier * arg(1)} in loop, called 10000 times :  0.3590
Ended coactivities: 1
