     3 *-* count = 10
     4 *-* call run count, .context~package~findRoutine("emptyRoutine")
 0.0320  0.0150  0.0160  0.0160  0.0160  0.0150  0.0320  0.0150  0.0160  0.0150 mean= 0.0203
     5 *-* call run count, {/**/}
 0.0320  0.0310  0.0310  0.0160  0.0310  0.0310  0.0320  0.0620  0.0160  0.0310 mean= 0.0313
     6 *-* call run count, {::r}
 0.0310  0.0310  0.0160  0.0310  0.0320  0.0310  0.0150  0.0320  0.0310  0.0310 mean= 0.0281
     7 *-* call run count, .methods["EMPTYMETHOD"]
 0.0160  0.0310  0.0310  0.0160  0.0310  0.0310  0.0160  0.0310  0.0320  0.0150 mean= 0.0250
     8 *-* call run count, {::m}
 0.0470  0.0310  0.0470  0.0470  0.0310  0.0320  0.0310  0.0470  0.0310  0.0310 mean= 0.0375
    10 *-* call run count, {::r.c}
 0.0780  0.0320  0.0460  0.0320  0.0310  0.0310  0.0470  0.0310  0.0470  0.0310 mean= 0.0406
    12 *-* call run count, {::m.c}~doer(.nil)
 0.0320  0.0310  0.0470  0.0310  0.0470  0.0470  0.0310  0.0470  0.0470  0.0310 mean= 0.0391
    14 *-* call run count, .context~package~findRoutine("myRoutine")
.......... 0.0470 .......... 0.0160 .......... 0.0310 .......... 0.0310 .......... 0.0310 .......... 0.0320 .......... 0.0310 .......... 0.0310 .......... 0.0310 .......... 0.0470 mean= 0.0328
    15 *-* call run count, {if item // 1000 == 0 then call charout ,"."}
.......... 0.0470 .......... 0.0310 .......... 0.0470 .......... 0.0470 .......... 0.0310 .......... 0.0470 .......... 0.0470 .......... 0.0310 .......... 0.0320 .......... 0.0310 mean= 0.0391
    16 *-* call run count, {::r if item // 1000 == 0 then call charout ,"."}
.......... 0.0310 .......... 0.0310 .......... 0.0320 .......... 0.0310 .......... 0.0310 .......... 0.0470 .......... 0.0310 .......... 0.0310 .......... 0.0320 .......... 0.0310 mean= 0.0328
    17 *-* call run count, .methods["MYMETHOD"]
.......... 0.0310 .......... 0.0310 .......... 0.0320 .......... 0.0310 .......... 0.0470 .......... 0.0310 .......... 0.0310 .......... 0.0320 .......... 0.0310 .......... 0.0310 mean= 0.0328
    18 *-* call run count, {::m if self // 1000 == 0 then call charout ,"."}
.......... 0.0470 .......... 0.0470 .......... 0.0470 .......... 0.0310 .......... 0.0470 .......... 0.0470 .......... 0.0310 .......... 0.0470 .......... 0.0470 .......... 0.0310 mean= 0.0422
    20 *-* call run count, {::r.c do forever ; .yield[]; item = arg(1) ; if item // 1000 == 0 then call charout ,"." ; end}
.......... 0.4840 .......... 0.3910 .......... 0.4530 .......... 0.4840 .......... 0.4380 .......... 0.3120 .......... 0.4690 .......... 0.3910 .......... 0.3750 .......... 0.3280 mean= 0.4125
    21 *-* call run count, {::m.c do forever ; .yield[]; item = arg(1) ; if item // 1000 == 0 then call charout ,"." ; end}~doer(.nil)
.......... 0.3120 .......... 0.3130 .......... 0.3590 .......... 0.3440 .......... 0.3130 .......... 0.4060 .......... 0.5940 .......... 0.5930 .......... 0.3130 .......... 0.3750 mean= 0.3922
    23 *-* call run count, .myCoactivity~new
.......... 0.2810 .......... 0.3590 .......... 0.2970 .......... 0.3750 .......... 0.4380 .......... 0.4840 .......... 0.2810 .......... 0.2820 .......... 0.2810 .......... 0.2810 mean= 0.3359
    25 *-* trace O
4.00003000E+10 200000 loops, no call :  0.1410
4.00003000E+10 routine double, called 200000 times :  0.3120
4.00003000E+10 literal {return 2 * arg(1)}~doer before loop, called with ~do 200000 times :  0.4070
4.00003000E+10 literal {return 2 * arg(1)} before loop, called with ~do 200000 times :  0.7960
4.00003000E+10 literal {return 2 * arg(1)} before loop, called with ~() 200000 times :  0.9540
4.00003000E+10 literal {return 2 * arg(1)} in loop, called with ~do 200000 times :  1.5460
4.00003000E+10 literal {return 2 * arg(1)} in loop, called with ~() 200000 times :  1.6100
4.00003000E+10 literal {:return 2 * arg(1)} before loop, called with ~do 200000 times :  0.7970
4.00003000E+10 literal {:return 2 * arg(1)} before loop, called with ~() 200000 times :  1.0150
4.00003000E+10 literal {:return 2 * arg(1)} in loop, called with ~do 200000 times :  1.4070
4.00003000E+10 literal {:return 2 * arg(1)} in loop, called with ~() 200000 times :  1.5780
4.00003000E+10 literal {::m return 2 * self} before loop, called with ~do 200000 times :  0.9530
4.00003000E+10 literal {::m return 2 * self} before loop, called with ~() 200000 times :  1.1250
4.00003000E+10 literal {::m return 2 * self} in loop, called with ~do 200000 times :  1.6090
4.00003000E+10 literal {::m return 2 * self} in loop, called with ~() 200000 times :  1.8280
4.00003000E+10 literal {::cl expose multiplier ; return multiplier * arg(1)} before loop, called with ~do 200000 times :  0.6720
4.00003000E+10 literal {::cl expose multiplier ; return multiplier * arg(1)} before loop, called with ~() 200000 times :  0.8440
4.00003000E+10 literal {::cl expose multiplier ; return multiplier * arg(1)} in loop, called with ~do 200000 times :  6.8590
4.00003000E+10 literal {::cl expose multiplier ; return multiplier * arg(1)} in loop, called with ~() 200000 times :  7.0620
Ended coactivities: 1
