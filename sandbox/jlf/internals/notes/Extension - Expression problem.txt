In relation with extensions of predefined classes in ooRexx.
The title "Expression problem" is not good for ooRexx because it's about static
type safety (e.g., no casts)
https://en.wikipedia.org/wiki/Expression_problem
Adding "Extension" in the title.


--------------------------------------------------------------------------------
Monkey-patching
--------------------------------------------------------------------------------

https://shopify.engineering/the-case-against-monkey-patching
The Case Against Monkey Patching, From a Rails Core Team Member

https://www.justinweiss.com/articles/3-ways-to-monkey-patch-without-making-a-mess/
Ruby

https://blog.daveallie.com/clean-monkey-patching
Ruby Clean Monkey Patching

https://stackoverflow.com/questions/30757126/why-the-module-classmethods-defined-and-extended-in-the-same-namespace
Ruby
This is actually a pretty common practice in Ruby.
Basically, what it's saying is: when some object performs include MyModule, make
it also extend MyModule::ClassMethods. Such a feat is useful if you want a mixin
that adds some methods not just to the instances of a class, but to the class itself.

https://www.pythonforthelab.com/blog/monkey-patching-and-its-consequences/
Python

https://machinelearningmastery.com/monkey-patching-python-code/
Python

http://blog.headius.com/2012/11/refining-ruby.html
Ruby

http://yehudakatz.com/2010/11/30/ruby-2-0-refinements-in-practice/
Ruby
The purpose of refinements in Ruby 2.0 is to make monkey-patching safer.
Specifically, the goal is to make it possible to extend core classes, but to
limit the effect of those extensions to a particular area of code.


--------------------------------------------------------------------------------

https://docs.swift.org/swift-book/documentation/the-swift-programming-language/extensions/
Extensions add new functionality to an existing class, structure, enumeration, or protocol type.
This includes the ability to extend types for which you do not have access to the original source code (known as retroactive modeling).
Extensions can add new functionality to a type, but they cannot override existing functionality.
---
Note
Extensions can add new computed properties, but they canâ€™t add stored properties,
or add property observers to existing properties.
jlf: ooRexx is more powerful because it's possible to add stored proprties.
That is the killer feature! Any object, including an instance of predefined
class, and the class itself, has a pool of variables.

https://docs.swift.org/swift-book/documentation/the-swift-programming-language/protocols/#Protocol-Extensions
Swift Protocol Extensions


https://stackoverflow.com/questions/37104683/are-there-other-languages-that-have-something-like-swifts-extensions
Swift extensions are not monkey patching.


--------------------------------------------------------------------------------


https://www.reddit.com/r/Kotlin/comments/de6o4e/kotlin_extension_functions_vs_ruby_and_java/
kotlin extension functions vs ruby and java script monkey patching?
It is not the same.
First, for you to use an extension function, you need to import it.
Second, they don't show up if you use reflection to look at the class.
Third, since you are actually not modifying the class, you can have 2 extension
methods with the same name and signature in the same program, and not have any
error (let's say they are private, and are in libraries you are using).
The way monkey patch works is like you said, by adding a new method to a class.
The way extension functions work, is by creating a regular function, and just
giving you a nice syntactic sugar for accessing it.


--------------------------------------------------------------------------------


http://adambard.com/blog/structured-clojure-protocols-and-multimethods/
Structured clojure: Protocols and multimethods
http://clojure.org/multimethods
http://stackoverflow.com/questions/4509782/simple-explanation-of-clojure-protocols

http://perfectionkills.com/extending-native-builtins/

http://channel9.msdn.com/shows/Going+Deep/C9-Lectures-Dr-Ralf-Laemmel-Advanced-Functional-Programming-The-Expression-Problem/
http://channel9.msdn.com/shows/Going+Deep/C9-Lectures-Dr-Ralf-Lmmel-Advanced-Functional-Programming-Type-Classes/

http://msdn.microsoft.com/en-us/library/bb383977.aspx
Extension Methods (C# Programming Guide)

http://lambda-the-ultimate.org/node/4136

http://journal.stuffwithstuff.com/2011/04/21/multimethods-multiple-inheritance-multiawesome/
http://journal.stuffwithstuff.com/2010/10/01/solving-the-expression-problem/

http://www.ibm.com/developerworks/java/library/j-clojure-protocols/index.html
http://www.reddit.com/r/programming/comments/fp0re/solving_the_expression_problem_with_clojure/
http://www.javarants.com/2011/01/22/using-closures-method-handles-and-extension-methods-in-java-8-jsr-335/?utm_source=feedburner&utm_medium=feed&utm_campaign=Feed%3A+javarants+%28java+rants%29&utm_content=Google+Reader

http://cr.openjdk.java.net/~briangoetz/lambda/lambda-state-4.html
http://cr.openjdk.java.net/~briangoetz/lambda/Defender%20Methods%20v4.pdf

http://www.wiki.jvmlangsummit.com/images/7/71/2011_Goetz_Extension.pdf
Virtual extension methods

http://javascriptweblog.wordpress.com/2011/12/05/extending-javascript-natives/

https://groups.google.com/forum/?hl=en&fromgroups#!topic/qilang/uGNHTS9LII4
The expression problem

https://github.com/jll63/yomm2
Fast, orthogonal, open multi-methods.
Solve the Expression Problem in C++17.
