named arguments


C# : http://msdn.microsoft.com/en-us/library/dd264739.aspx
When you use named and optional arguments, the arguments are evaluated in the order in which they appear in the argument list, not the parameter list.
A named argument can follow positional arguments, as shown here : CalculateBMI(123, height: 64);
However, a positional argument cannot follow a named argument : //CalculateBMI(weight: 123, 64);

Python
http://docs.python.org/py3k/reference/compound_stmts.html#function-definitions
http://docs.python.org/py3k/reference/expressions.html#calls
http://docs.python.org/tutorial/controlflow.html#more-on-defining-functions
http://docs.python.org/extending/extending.html#keyword-parameters-for-extension-functions



=================================================================
--> I started to think about that, but it appears that the ooRexx arguments are not easy to manage by name.
It's because the arguments are not declared in a single place at the begining of a procedure/routine/method.
They can be declared several times, and complex expressions can be used (stem, instance's attribute, ...).
Moreover, named arguments can be passed in any order, and that's a problem with current management by array.
So, I give up...
[2015 mar 8]
I reopen the subject... Named arguments can be managed separately from the array of arguments.
"123 456 789"~reduceW(100, "+")
could become
"123 456 789"~reduce("+") by:"word" initial:100
The named parameters don't impact the array of arguments, nor the declaration of arguments.
They could be provided in a directory returned by .context~namedArgs.
They could be optionally be declared with the 'use' instruction :
use strict named args by, initial=.nil


24/11/2018
Named arguments are implemented.
