C++ Pipelines
http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3534.html
http://code.google.com/p/google-concurrency-library/source/browse/include/pipeline.h


http://www.balisage.net/Proceedings/vol3/print/Kay01/BalisageVol3-Kay01.html

http://www.yesodweb.com/book/conduit

http://www.yesodweb.com/blog/2012/01/conduit-versus-enumerator

http://hestia.typepad.com/flatlander/2011/06/partial-function-application-in-f-part-2-a-technique-for-simplicity.html
Il y a un exemple de pipe |> dans F#

http://lorgonblog.wordpress.com/2008/03/30/pipelining-in-f/

http://www.wordloosed.com/running-yahoo-pipes-on-google-app-engine

http://pipes.yahoo.com/pipes/

http://ipages.iland.net/~jimj/

http://www.tenfiftytwo.co.uk/pipelines/
http://sourceforge.net/projects/oorexx/forums/forum/408479/topic/3814527

Simon Nash
http://jstreamer.com/technical.html

Flow based programming
http://www.pypes.org/

Flow based programming
http://wiki.python.org/moin/FlowBasedProgramming

Ruffus is a lightweight python module for running computational pipelines
http://code.google.com/p/ruffus/

Pipe: Infix syntax for Python
http://dev-tricks.net/pipe-infix-syntax-for-python

http://code.google.com/p/appengine-pipeline/

Kamaelia - Concurrency made useful, fun
http://www.kamaelia.org/Home.html

http://software.intel.com/en-us/blogs/2011/03/31/the-join-node-in-the-intel-threading-building-blocks-graph-community-preview-feature-2/

http://threadingbuildingblocks.org/

http://en.wikipedia.org/wiki/Pipeline_%28Unix%29

http://lorgonblog.wordpress.com/2008/03/30/pipelining-in-f/


============================================================================
http://groups.google.com/group/comp.lang.rexx/browse_thread/thread/356f08d60008ac05?hl=en

I was looking into SysCreatePipe regarding Swiftys problem with piping a mail body to the mail command.
I couldn't find any examples of the usage of SysCreatePipe and the Ref.Manual is very sparse.
My knowledge of unnamed pipes in Unix, is shaky so I may be way out of bounds here.
Anyway, I came up with this code:
#!/usr/bin/rexx
signal on novalue
trace r
handles = SysCreatePipe()
parse var handles IN OUT .
say "Input handle is"  IN
say "Output handle is" OUT
-- Se Chapter 14.1.4 in ooRexx Ref.
outstream = .stream~New("HANDLE:"OUT)
outstream~lineout("2 hello")
outstream~lineout("3 hello")
outstream~lineout("4 hello")
outstream~lineout("8 hello")
outstream~lineout("9 hello")
outstream~lineout("7 hello")
outstream~lineout("1 hello")
outstream~lineout("")
outstream~flush
--Redirect handle IN linked to  stdin (0)
address bash "sort" IN"<&0 >/tmp/sorted file"
outstream~close
exit 0
  ... which gave the following output:

      5 *-* handles = SysCreatePipe()
        >>>   "4 5"
      7 *-* parse var handles IN OUT .
        >>>   "4 5"
        >>>   "4"
        >>>   "5"
      9 *-* say "Input handle is"  IN
        >>>   "Input handle is 4"
Input handle is 4
     10 *-* say "Output handle is" OUT
        >>>   "Output handle is 5"
Output handle is 5
     12 *-* outstream = .stream~New("HANDLE:"OUT)
        >>>   "a Stream"
     14 *-* outstream~lineout("2 hello")
Segmentation fault

:-(

/dg

Running on Linux AMD64 (Ubuntu 10.04 lucid Kernel 2.6.32-28-generic)
Open Object Rexx Version 4.1.0
Build date: Dec  3 2010
Addressing Mode: 64


============================================================================
Notes about pipe.rex

fanout : forward eof to self~next and self~secondary, but not to super

merge : send a 'done' message

console : process does forward class (super) --> why needed here, and not in other classes ?
answer : because .console does not transform the items, it just displays them. So it can
forward to class (super) which will take care of sending the item & index to next pipestage.
The other classes transform the items, and write themselves the new item. If they forwarded
to class (super) then the unchanged item would be also sent to the next pipeStage.


http://freshmeat.net/projects/pv
pv (Pipe Viewer) is a terminal-based tool for monitoring the progress of data through a pipeline.
It can be inserted into any normal pipeline between two processes to give a visual indication of
how quickly data is passing through, how long it has taken, how near to completion it is, and an
estimate of how long it will be until completion.


http://www.softpanorama.org/Scripting/Shellorama/Control_structures/pipes_in_loops.shtml


