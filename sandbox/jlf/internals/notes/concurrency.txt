===================================================================================
Extracted from
https://news.ycombinator.com/item?id=21227430
Larry Wall has approved renaming Perl 6 to Raku (github.com)


weff_
I'm trying to understand, what kind of scripting requires first-class concurrency that isn't fulfilled by say Python?


dragonwriter
For concurrency I think Raku has slightly more developed async support than Python, but the bigger advantage, I think,
is in parallelism where, aside from the CPython GIL limiting practical parallelism in the main implementation
(which is a big deal), Python as a language lacks the parallel iterables produced by the hyper (parallel but constrained
to return in order) and race (parallel and not constrained in order) methods on the Iterable role in Raku, or anything
like Raku’s hyperoperators that are semantically concurrent and parallelizable at the discretion of the optimizer.
(Come to think of it, while also parallel, all those are also high-level concurrency constructs that Python lacks
equivalents to.)
Python as a language can support parallelism via threads, and CPython as an implementation can via multiprocessing,
but those are both very low level abstractions; Raku has higher level abstractions which allow much more succinct
expression of parallel operations.


Too
Sounds like multiprocessing.Pool.imap and imap_unordered?
When dealing with io you also have async/await equivalent iterators like asyncio.as_completed().


Grinnz
I am not that familiar with Python, but the GIL has long prevented any real in-process concurrency.
Perl has concurrency but it's complex, heavy, and poorly supported.
Raku's approach to this is built to avoid all these problems (like Elixir).


weff_
I agree the GIL is a problem but it's only an issue for CPU-bound problems.
Is there really an important amount of CPU-bound work that is written in a scripting language?
If it's CPU-bound, wouldn't you want to use something lower level?


nuclear_eclipse
If it's entirely CPU bound, you can use multiprocessing to negate most of the GIL issues,
and transparently send inputs/outputs between the parent and child processes.
If it's I/O bound, then AsyncIO is a great way to express asynchronous workflows.
If it's a combination of both I/O and CPU bound workloads, there are ways to mix multiprocessing
and AsyncIO to better saturate your cores without losing the simplicity or readability of Python:
https://github.com/jreese/aiomultiprocess


weff_
Very true, I had not even thought about the multiprocessing package;
it's sometimes not as convenient as multithreading but it'll get those other cores working.


karmakaze
It's not just CPU bound problems, handling multiple overlapping i/o operations is more trouble than it ought to be.


weff_
Can you expand a bit on that? I'm not familiar with the issue you're describing.


Grinnz
Indeed and as a Perl developer I make use of XS/external libraries, cooperative multitasking
(event loops/promises), and forking to cover these use cases.
It doesn't preclude wanting the additional option to take advantage of threads in a useful way, since they do exist.


vaer-k
Why should first-class concurrency needs be required to script in Elixir?
This question seems to imply that Python is somehow a default language and special requirements must be needed to
justify writing in something else. Elixir is general-use and pleasant to write scripts in so seems reasonable to me
for someone to do so if that's their thing.


weff_
Ovid2 said Perl6 has a good concurrency model
lliamander replied that Elixir does too and it's worth a look
To that, 7thaccount replied that Perl6 and Elixir fill different niches.
So far, it seems Perl6 fills a niche that requires scripting and first-class concurrency.
My question then is: what is this niche that requires very solid concurrency but also scripting.
In other words, what does Perl6 have in terms of concurrency that Python does not (given they are both scripting languages)?


Ultimatt
Jonathan Worthington (Rakudo Compiler Architect). Keynote: Perl 6 Concurrency
https://www.youtube.com/watch?v=hGyzsviI48M


lliamander
A fair question.
I don't know of many instances where scripting and concurrency would be needed in the same application.
But if you wanted to use single language both for scripting tasks and applications that require concurrency,
then Raku or Elixir would work.
One instance I can actually think of, that would be specific to Erlang/Elixir, is if you have a long running
service that you sometimes run batch jobs against (like importing data from a CSV). An Elixir script can hook
directly into an Elixir/Erlang service and interact with it using message passing. It's a heck of a lot simpler
than RMI, and avoids the need to expose new HTTP endpoints specifically for such tasks.


weff_
Is that like the relationship between C# and PowerShell?


lliamander
I think so, at least in some ways.
I've shipped a project using PowerShell to script Windows Server/Hyper-V, and it was a pretty pleasant experience.
Having a scripting language that not only does typical scripting stuff (wrangling text, etc.) and understands
your application's objects is excellent.
Some differences:
* You can actually write your whole application in Elixir, whereas I could not see doing that with PowerShell
* In Erlang/Elixir, instead of objects you have processes. Think of your application as a microservice architecture
  on steroids, using the Erlang RPC protocol as a means for inter-process communication.
Because each process just sends and receives messages, your script can just send messages to any of the processes
that make up your application, as if they were your own service. All you have to do is connect to the remote
application using the Erlang Distribution Protocol (to connect different runtimes over the network).


weff_
I heard so much about the actor model, I should really try it in its intended glory one day.


lliamander
It's a trip, and it took me a little while to wrap my head around.
However, I now much prefer it to working with other concurrency abstractions (such as callbacks).


labster
Does Python 3 have any operators that transform ordinary method calls into concurrent method calls?
Perl 6/Raku does.


dragonwriter
More to the point, does Python 3 have operators that transform sequential operations into operations
that are both concurrent and parallelizable, and, in the case of iteration, provide control of parallelism
parameters and whether results are constrained to be in-order or not.
To which the answer is “not only does Python not have them, but with the GIL CPython couldn't do much with
them even if the language had them.”


maksimum
Yes, async/await. https://docs.python.org/3/library/asyncio-task.html#awaitabl...


weff_
Is that a bit like Go's `go` keyword?
edit: that is, as far as I can tell, after a quick Google, it's not too different from Python's Thread object.


pmezard
It is, python Threads are system threads.


greggman2
I'm embarrased to say I write scripts in node :P
I used to write scripts in python but I've been writing so much JS that it's just easier for me in node.
Plus, node defaults to locally installed deps so I don't have to deal with virutal environments.


tekknik
Why do you think this is embarrassing? Javascript is great for small scripts. Largr codebases then sure


Grinnz
Which is a similar response to the comments asking "why Perl over Python?" I ask, why not (both)?


dnautics
Well just from experience untangling async calls in python is a nightmare and sometimes hard to reason about.
The red/blue function problem is real. Meanwhile dispatching concurrent long-running scripting tasks is basically
trivial in elixir (Enum.map over Task.async, then Enum.map over Task.await)


ajoseps
I'm guessing because Python's concurrency relies on the Global Interpreter Lock.
Although I think concurrent.futures might address that. Haven't worked with python concurrency libraries in a bit.


weff_
as I posted above:
I agree the GIL is a problem but it's only an issue for CPU-bound problems.
Is there really an important amount of CPU-bound work that is written in a scripting language?
If it's CPU-bound, wouldn't you want to use something lower level?


zaphirplane
There is machine learning, which usually calls into numpy or other c extensions With a lot of the data preparation
done in python


rubyn00bie
tldr; Using a scripting language that allows for native threads or has a strong concurrency model builtin to the core
would be beneficial for any CPU bound scripting task...
Python's concurrency model is good for waiting on network or disk I/O because of its GIL (Global Interpreter Lock):
https://realpython.com/python-gil/#the-impact-on-multi-threa...
If your program is CPU bound the GIL will slow you down.
I'm sure since the python ecosystem is quite vast there are ways around the GIL...
but then you have to worry about every library you use not supporting "real" multi-threading,
or (b)locking for no reason and shitting all over your efforts.


weff_
As I've posted above, I'm a bit confused by CPU-bound work being processed in a scripting language.
If you're planning on doing intense CPU-bound work, maybe use a lower-level language?
I'm not saying abandon Python: you can extend Python with C or just use IPC to transfer data between
a Python front-end and a computation back-end.


zmmmmm
At one time it was an obvious dichotomy that you would not use a scripting language for CPU bound work,
but these days it is a much more blurry line. Partly because modern efficient languages are becoming ergonomic
enough to work well as scripting languages while still giving you very good performance.
I actually love doing CPU bound work in Groovy which is usually described as a scripting language.
But it gets converted straight to java byte code which is JIT'd and ends up as machine code.
It only takes a few static typed hints here and there and it runs in the same league as C++ implementations.
And it gets Java's excellent concurrency support for free.


rubyn00bie
I totally you feel you, I guess I thought your question was substantially more surface level than it was. My apologies.
I'm personally with you. I also don't tend to think object boxing is really the performance bottleneck for most applications,
and if/when it is, likely the other requirements should've already ruled out using one (a scripting language).
It's like writing Nifs for Elixir, yeah sure you _can_, they have their purpose, but you could also just write another
application to do that one thing and like you said, use IPC.
So in summary, we agree with each other, here's to:
the right tool for the job!


===================================================================================
node.js

http://bjouhier.wordpress.com/2012/03/11/fibers-and-threads-in-node-js-what-for/
node-fibder : https://github.com/laverdet/node-fibers
Threads  à gogo : https://github.com/xk/node-threads-a-gogo


===================================================================================
Lock-free programmming

http://mintomic.github.io/
Mintomic
A Small, Portable Lock-Free API

http://preshing.com/20130618/atomic-vs-non-atomic-operations/

https://github.com/ivmai/libatomic_ops/

===================================================================================

https://news.ycombinator.com/item?id=6560214
No More Callbacks: 10,000 Actors, 10,000 Threads, 10,000 Spaceships

https://github.com/Amanieu/asyncplusplus

http://www.mail-archive.com/rebol-list@rebol.com/msg09673.html
[REBOL] Re: About CONTINUATIONS

http://stackoverflow.com/questions/2708033/technically-why-is-processes-in-erlang-more-efficient-than-os-threads

http://www.sics.se/~joe/ericsson/du98024.html
Performance Measurements of Threads in Java and Processes in Erlang

https://groups.google.com/forum/?hl=en-GB&fromgroups=#!topic/qilang/UVG_aqH1n5U

http://www.haskell.org/haskellwiki/GHC/Data_Parallel_Haskell


http://herbsutter.com/welcome-to-the-jungle/


http://soniacodes.wordpress.com/2011/03/15/concurrency-review/


http://threadingbuildingblocks.org/

http://docs.python.org/2/c-api/init.html
Python/C API Reference Manual
Initialization, Finalization, and Threads

http://docs.python.org/2/library/multiprocessing.html
16.6. multiprocessing — Process-based “threading” interface

http://www.voidspace.org.uk/python/weblog/arch_d7_2008_11_01.shtml#e1028

http://smoothspan.wordpress.com/2007/09/14/guido-is-right-to-leave-the-gil-in-python-not-for-multicore-but-for-utility-computing/


=====================================================================
RexxActivation.hpp
getReserveCount
getVariableDictionary

Modification des accesseurs qui renvoient le dictionnaire et le compteur
Le but est d'avoir l'info, même si l'activation n'a pas encore été mise à jour avec ces infos.
D'après ce que je comprends, la mise à jour se fait uniquement s'il y a accès à une variable.


            this->settings.object_variables = this->receiver->getObjectVariables(this->scope);
Le receiver est tout objet :
   RexxObject          *receiver;      /* target of a message invocation    */
ObjectClass.hpp
     RexxVariableDictionary *getObjectVariables(RexxObject *);


=====================================================================


Le flag object_scope == SCOPE_RESERVED est local à chaque activation.
J'ai l'impression que c'est une optimisation et il n'apporte pas une info très utile...
Ce qui est plus utile, c'est si le dictionnaire de variable est reservé :
this->settings.object_variables->reserve(this->activity);
et par qui :
this->reservingActivity

guard on
guard off

        ==========================================
        JLF : ici le context est un RexxACtivation
        ==========================================
        if (!(instructionFlags&guard_on_form))      /* is this the OFF form?             */
        {
            context->guardOff();             /* set unguarded status in activation*/
        }
        else
        {
            context->guardOn();              /* set guarded status in activation  */
        }



guard on when expression
RexxInstructionGuard::execute(
    RexxActivation      *context,      /* current activation context        */
    RexxExpressionStack *stack )       /* evaluation stack                  */

        size = variableCount;              /* get variable list count           */
        for (i = 0; i < size; i++)       /* loop through the variable list    */
        {
            /* set a guard on each variable,     */
            /* counting the guards on each       */
            /* variable that is actually exposed */
            this->variables[i]->setGuard(context);
        }

        if (!(instructionFlags&guard_on_form)) /* is this the OFF form?             */
        {
            context->guardOff();             /* set unguarded status in activation*/
        }
        else
        {
            ==============================================================================
            JLF : DONC ON RESERVE LE DICTIONNAIRE AVANT MËME DE TESTER L'EXPRESSION ??????
            ==============================================================================
            context->guardOn();              /* set guarded status in activation  */
        }


        ================================================
        JLF : il y a UN SEUL currentActivity dans le système (!!!!)
        C'est une variable statique de ActivityManager
        ================================================
        ActivityManager::currentActivity->guardSet();       /* initialize the guard sem          */         JLF : c'est un RESET !


        /* get the expression value          */
        result = this->expression->evaluate(context, stack);
        context->traceResult(result);      /* trace if necessary                */
                                           /* do first evaluation without       */
                                           /* establishing any variable guards  */
                                           /* false on first attempt?           */
        if (!result->truthValue(Error_Logical_value_guard))
        {
            do                             /* need to loop until true           */
            {
                stack->clear();                /* clear the expression stack        */
                context->guardWait();       /* establish guards and wait         */                         JLF : RexxActivation::guardWait
                ActivityManager::currentActivity->guardSet();   /* initialize the guard sem          */     JLF : c'est un RESET !
                result = this->expression->evaluate(context, stack);
                context->traceResult(result);  /* trace if necessary                */
                                               /* while this is still false         */
            } while (!result->truthValue(Error_Logical_value_guard));
        }
        for (i = 0; i < size; i++)       /* loop through the variable list    */
        {
            /* set a guard on each variable,     */
            /* counting the guards on each       */
            /* variable that is actually exposed */
            this->variables[i]->clearGuard(context);
        }




Il y a un sémaphore par instance de RexxActivity pour les guard expressions
   SysSemaphore        guardsem;       /* guard expression semaphore        */




void RexxActivation::guardWait()
/******************************************************************************/
/* Function:  Wait for a variable in a guard expression to get updated.       */
/******************************************************************************/
{
    int initial_state = this->object_scope;  /* save the initial state            */
                                         /* have the scope reserved?          */
    if (this->object_scope == SCOPE_RESERVED)
    {
        /* tell the receiver to release this */
        this->settings.object_variables->release(this->activity);
        /* and change our local state        */
        this->object_scope = SCOPE_RELEASED;    /* do an assignment! */
    }
    this->activity->guardWait();         /* wait on a variable inform event   */
                                         /* did we release the scope?         */
    if (initial_state == SCOPE_RESERVED)
    {
        /* tell the receiver to reserve this */
        this->settings.object_variables->reserve(this->activity);
        /* and change our local state        */
        this->object_scope = SCOPE_RESERVED;    /* do an assignment! */
    }
}



void RexxActivity::guardSet()
/******************************************************************************/
/* Function:  Clear a guard expression semaphore in preparation to perform a  */
/*            guard wait                                                      */
/******************************************************************************/
{
    guardsem.reset();               /* set up for guard call             */
}






===============================================================================

Relation entre RexxActivity et thread

class RexxActivity
   thread_id_t threadIdMethod();
   bool isThread(thread_id_t id) { return currentThread.equals(id); }

   SysActivity currentThread;            /* descriptor for this thread        */


===============================================================================

RexxActivity.cpp
RexxActivity::RexxActivity(bool createThread)
: runsem("RexxActivity::runsem"), guardsem("RexxActivity::guardsem")

Le nom des variables passé en paramètre est bien stocké
mais ensuite effacé par
this->clearObject();

défini dans ObjectClass.hpp
  class RexxInternalObject : public RexxVirtualBase{
     inline void   clearObject() { memset(getObjectDataSpace(), '\0', getObjectDataSize()); }

     static inline size_t getObjectHeaderSize() { return sizeof(RexxInternalObject); }
     inline size_t getObjectDataSize() { return getObjectSize() - getObjectHeaderSize(); }
     inline void  *getObjectDataSpace() { return ((char *)this) + getObjectHeaderSize(); }


====================================================================================
https://mail.google.com/mail/?shva=1#inbox/12eb5d34607ac1c0
Guard conditions nest.  So the guard off in the m1 method does not
completely remove the locking from that thread.  It only removes the
guarded condition caused by entry to that method, so the object is
still locked by that thread.


RexxActivation.object_scope est une optimisation :
si == SCOPE_RELEASED alors pas besoin d'aller voir le dictionnaire de variables this->settings.object_variables
sinon, le reserveCount est testé


RexxActivation.hpp
   inline void       guardOff()
    {
                                           /* currently locked?                 */
      if (this->object_scope == SCOPE_RESERVED) {
                                           /* release the variable dictionary   */
        this->settings.object_variables->release(this->activity);
                                           /* set the state to released         */
        this->object_scope = SCOPE_RELEASED;
      }
    }


RexxActivation.cpp
void RexxActivation::guardOn()
{
    ====================================
    JLF : si object_scope indique que le dictionnaire est déjà reservé, rien à faire.
    sinon, on demande à reserver le dictionnaire mais ça peut être bloquant. En sortie, on est SCOPE_RESERVED.
    ====================================
    /* currently in unguarded state?     */
    if (this->object_scope == SCOPE_RELEASED)
    {
        /* not retrieved yet?                */
        if (this->settings.object_variables == OREF_NULL)
        {
            /* get the object variables          */
            this->settings.object_variables = this->receiver->getObjectVariables(this->scope);
        }
        /* lock the variable dictionary      */
        this->settings.object_variables->reserve(this->activity);			JLF : peut BLOQUER si besoin (object_variables est un RexxVariableDictionary)
        /* set the state here also           */
        this->object_scope = SCOPE_RESERVED;						JLF : donc cette activation n'aura le status SCOPE_RESERVED que lorsque la réservation est effective, après attente si besoin
    }
}


====================================================================================

interpreter/execution/RexxVariableDictionary.cpp
RexxVariableDictionary::release
this->reserveCount


RexxVariableDictionary::reserve
if (this->reservingActivity == OREF_NULL) // currently unlocked ?
this->reserveCount++;


RexxVariableDictionary::release
this->reserveCount--;


RexxVariableDictionary::transfer



Plus de détails
---------------
Un dictionnaire est associé à une activité qui l'a réservé.
3 cas :
- dictionnaire pas encore réservé : assignation du reservingActivity et reserveCount=1
- dictionnaire déjà réservé et l'appel se fait pour la même activité : reserveCount++
- dictionnaire déjà réservé et l'appel se fait par une autre activité :
  l'activité appelante est ajoutée en fin de queue, et mise en attente


void RexxVariableDictionary::reserve(
  RexxActivity *activity)              /* reserving activity                */
/******************************************************************************/
/* Function:  Reserve a scope on an object, waiting for completion if this    */
/*            is already reserved by another activity                         */
/******************************************************************************/
{
    /* currently unlocked?               */
    if (this->reservingActivity == OREF_NULL)
    {
        /* set the locker                    */
        OrefSet(this, this->reservingActivity, activity);
        this->reserveCount = 1;            /* we're reserved once               */
    }
    /* doing again on the same stack?    */
    else if (this->reservingActivity == activity)
    {
        this->reserveCount++;              /* bump the nesting count            */
    }
    else
    {                               /* need to wait on this              */
                                    /* go perform dead lock checks       */
        this->reservingActivity->checkDeadLock(activity);
        /* no list here?                     */
        if (this->waitingActivities == OREF_NULL)
        {
            /* get a waiting queue               */
            OrefSet(this, this->waitingActivities, new_list());
        }
        /* add to the wait queue             */
        this->waitingActivities->addLast((RexxObject *)activity);
        /* ok, now we wait                   */
        activity->waitReserve((RexxObject *)this);
    }
}


====================================================================================


RexxActivation::run
/* Function:  Run a REXX method...this is it!  This is the heart of the       */
/*            interpreter that makes the whole thing run!                     */
...
                if (isGuarded())
                {
                    /* get the object variables          */
                    this->settings.object_variables = this->receiver->getObjectVariables(this->scope);
                    /* reserve the variable scope        */
                    this->settings.object_variables->reserve(this->activity);
                    /* and remember for later            */
                    this->object_scope = SCOPE_RESERVED;
                }
...



RexxVariableDictionary * RexxActivation::getObjectVariables()
/******************************************************************************/
/* Function:  Return the associated object variables vdict                    */
/******************************************************************************/
{
    /* no retrieved yet?                 */
    if (this->settings.object_variables == OREF_NULL)
    {
        /* get the object variables          */
        this->settings.object_variables = this->receiver->getObjectVariables(this->scope);
        if (isGuarded())                   /* guarded method?                   */
        {
            /* reserve the variable scope        */
            this->settings.object_variables->reserve(this->activity);
            /* and remember for later            */
            this->object_scope = SCOPE_RESERVED;
        }
    }
    /* return the vdict                  */
    return this->settings.object_variables;
}
