==========================================================================================

Debug SysFileTree

dans gdb :
info b --> trouver le n° du breakpoint (ici 13)
ignore 13 19539 --> nbre de PROCHAINS passages à ignorer

Note : pour savoir combien de passages ignorer, mettre le breakpoint
et cocher "automatically continue"

RexxNativeActivation::variablePoolInterface(PSHVBLOCK pshvblock)
    RexxNativeActivation::variablePoolRequest(PSHVBLOCK pshvblock)
        RXSHV_SYSET : RexxNativeActivation::variablePoolSetVariable(PSHVBLOCK pshvblock)

p ldp->truefile
affichage tronqué.
Pour voir la totalité :
set print elements 0

"/Users/jlfaucher/Library/Caches/Metadata/Safari/History/http:%2F%2Fdeveloper.apple.com%2Flibrary%2Fmac%2F%23documentation%2FDeveloperTools%2FReference%2FXcodeBuildSettingRef%2F1-Build_Setting_Reference%2Fbuild_setting_ref.html%23%2F%2Fapple_ref%2Fdoc%2Fuid%"


==========================================================================================

OutputDebugString
http://www.unixwiz.net/techtips/outputdebugstring.html

syslog
http://fr.wikipedia.org/wiki/Syslog
http://www.linux-kheops.com/doc/man/manfr/man-html-0.9/man3/syslog.3.html
LOG_USER | LOG_DEBUG


==========================================================================================

http://www.oklabs.net/skype-reverse-engineering-the-long-journey/
Montre comment utiliser Olly dbg


===============================================================================
jlf Apr 14, 2021
In dbgprintf, I replaced syslog (Linux & MacOs) and OutputDebugString (Windows)
by printf
because I was not able to retrieve the debug text under MacOs.
The procedure described below did not work for me in 2021...


(copied from _diary.txt)
2010 may 15

Added the function dbgprintf to write debug strings.
Under Windows, it calls OutputDebugString.
Under Linux, it calls syslog.

Remember, typical debug session under PuppyLinux (with busybox) :
Open a console :
    syslogd -S -C   # -S Smaller loggin output. -C Log to share mem buffer (read it using logred).
    logread -f
    The output of syslog is displayed by logread in this console (lock management, on client and server side).
Open a console, launch rxapi.
    Has been compiled to stay as a foreground process.
    It sends debug strings to stderr, more easy to follow in this console (messages between client and server).
Open a console, run the rexx command. The two other consoles are updated with debug infos.


[2011 apr 25 update]
Under MacOsX, I see this message in console : process exceeded 500 log messages per second limit.
To bypass this limit :
Edit /System/Library/LaunchDaemons/com.apple.syslogd.plist with xcode (binary format)
Search for : <string>/usr/sbin/syslogd</string>
Add these lines to the program arguments section :
<string>-mps_limit</string>
<string>0</string>
A value of 0 disables the limit. The default is 500 messages per second.
Restart the syslog daemon with:
sudo launchctl unload /System/Library/LaunchDaemons/com.apple.syslogd.plist
sudo launchctl load /System/Library/LaunchDaemons/com.apple.syslogd.plist
-----
LOG_DEBUG messages still not visible in console...
Probably because of /etc/asl.conf :
    # save everything from emergency to notice
    ? [<= Level notice] store
Remember :
    Emergency     (level 0)
    Alert         (level 1)
    Critical      (level 2)
    Error         (level 3)
    Warning       (level 4)
    Notice        (level 5)
    Info          (level 6)
    Debug         (level 7)
-----
Create the file /var/log/debug.log :
sudo touch /var/log/debug.log
Add this line to /etc/syslog.conf to get the debug messages in /var/log/debug.log :
*.debug   /var/log/debug.log
then restart the syslogd daemon as explained above.

================================================================================
14/07/2021 (copied from ~/Dropbox/software/oorexx/doc/ooRexx.txt
================================================================================

data breakpoint:
memory breakpoint:

lldb) p this->named_argumentCount
(uint16_t) $1 = 1
(lldb) p &(this->named_argumentCount)
(uint16_t *) $2 = 0x000000010241ce74
(lldb) p sizeof(this->named_argumentCount)
(unsigned long) $3 = 2
(lldb) w s e -s 2 -- 0x000000010241ce74
Watchpoint created: Watchpoint 1: addr = 0x10241ce74 size = 2 state = enabled type = w
    new value: 14275852816613377


print variable:
p RexxBehaviour::primitiveBehaviours[0]


--------------------------------------------------------------------------------
Exception when debugging oodialog.wchar
I see several ASM instructions that are new to me...
cpuid
xgetbv
vmovd       xmm0,ecx
vpshufd     xmm0,xmm0,0
vinsertf128 ymm0,ymm0,xmm0,1
vmovdqu     ymm7,ymm0
vmovdqu     ymm8,ymm0
vmovdqu     ymm15,ymm0


--------------------------------------------------------------------------------
debug crash stack overflow

RexxActivity.cpp
put breakpoint in
RexxActivity::raisePropagate
on line
    activation->trap(condition, conditionObj);
with hit count 1000000

See at which count the crash occurs
and then analyze precisely at this count.


Exemple of code to force the crash :
{say arg(1); .context~executable~(1+arg(1))}~(0)


--------------------------------------------------------------------------------
Remember (debug stack overflow)

RexxActivity.cpp
RexxActivity::checkStackSpace

replace #if 0 by #if 1
to activate the debug output


This file has been adapted to debug a stack overflow :
Dropbox\software\do\do_rexx\stack_overflow


--------------------------------------------------------------------------------
To debug rexximage

With ooRexx 4.2:
    cdbuild
    cp .libs/*.dylib ../delivery/lib/

    because it's the libraries under delivery that are used.
    If you want to see that by yourself :
    otool -L .libs/rexximage

    cd .libs
    cp $builder_src_dir/interpreter/RexxClasses/*.orx .
    cp $builder_src_dir/interpreter/platform/unix/*.orx .


With ooRexx 5 and Executor:
    nothing to copy, ready to debug in place.


--------------------------------------------------------------------------------

/local/rexx/oorexx/build/executor.master/sandbox/jlf/trunk/macos/clang/debug/64/build/.libs$ lldb ./rexximage
(lldb) target create "./rexximage"
Current executable set to './rexximage' (x86_64).
(lldb) run
Process 9291 launched: './rexximage' (x86_64)
Process 9291 stopped
* thread #1: tid = 0xe38e7, 0x000000010000b818 librexx.4.dylib`rxStringSize<unsigned long, 1>::rxStringSize(this=0x00007fff5f400038, t=128043) + 24 at rexx.h:273, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=2, address=0x7fff5f3ffff8)
    frame #0: 0x000000010000b818 librexx.4.dylib`rxStringSize<unsigned long, 1>::rxStringSize(this=0x00007fff5f400038, t=128043) + 24 at rexx.h:273
   270 	    static rxStringSize value(T s) { return rxStringSize<T, D>(s); }
   271 	public:
   272 	    rxStringSize() /* : size(0) */ {} // Must NOT assign 0 because some constructors are sometimes called directly, and this assignement overrides some values already assigned... Strange practice, but...
-> 273 	    rxStringSize(T t) : size(t) {}
   274 	    rxStringSize(int t) : size(t) {}
   275 	    rxStringSize(const rxStringSize<T, D> &s) : size(s.size) {}
   276 	    T value() const { return size; }
(lldb) bt

