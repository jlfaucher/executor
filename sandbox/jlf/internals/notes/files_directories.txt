http://codingjunkie.net/java-7-copy-move/
http://codingjunkie.net/java-7-watchservice/
https://github.com/bbejeck/Java-7/blob/master/src/main/java/bbejeck/nio/files/directory/event/DirectoryEventWatcherImpl.java

--------------------------------------------------------------------------------
Windows MAX_PATH no longer limited to 260
--------------------------------------------------------------------------------

With Windows 10 anniversary edition and Windows Server 2016, itâ€™s possibe to get
around the 260 character limit with some caveats.
The new limit is 32,767 characters!
The app developer has to mark their app as long path aware, it's not something
the end user can switch on.
https://www.adamfowlerit.com/2016/10/windows-max-path-now-lot-bigger/

Illustration with CreateDirectory
https://msdn.microsoft.com/en-us/library/windows/desktop/aa363855.aspx
For the ANSI version of this function, there is a default string size limit for
paths of 248 characters (MAX_PATH - enough room for a 8.3 filename).
To extend this limit to 32,767 wide characters, call the Unicode version of the
function and prepend "\\?\" to the path.
For the unicode version of this function (CreateDirectoryW), you can opt-in to
remove the 248 character limitation without prepending "\\?\". The 255 character
limit per path segment still applies.


https://msdn.microsoft.com/en-us/library/windows/desktop/aa365247.aspx
Naming Files, Paths, and Namespaces

There is no need to perform any Unicode normalization on path and file name
strings for use by the Windows file I/O API functions because the file system
treats path and file names as an opaque sequence of WCHARs. Any normalization
that your application requires should be performed with this in mind, external
of any calls to related Windows file I/O API functions.

Starting in Windows 10, version 1607, MAX_PATH limitations have been removed
from common Win32 file and directory functions.
However, you must opt-in to the new behavior.

A registry key allows you to enable or disable the new long path behavior.
To enable long path behavior set the registry key at
HKLM\SYSTEM\CurrentControlSet\Control\FileSystem LongPathsEnabled (Type: REG_DWORD).
The key's value will be cached by the system (per process) after the first call
to an affected Win32 file or directory function (list follows). The registry key
will not be reloaded during the lifetime of the process. In order for all apps
on the system to recognize the value of the key, a reboot might be required
because some processes may have started before the key was set.

The registry key can also be controlled via Group Policy at
Computer Configuration > Administrative Templates > System > Filesystem > Enable NTFS long paths.

[JLF] "You can" ? Why not "You MUST" ? For me, it's up to the app developer to
mark his app as long path aware !
You can also enable the new long path behavior per app via the manifest:
<application xmlns="urn:schemas-microsoft-com:asm.v3">
    <windowsSettings xmlns:ws2="http://schemas.microsoft.com/SMI/2016/WindowsSettings">
        <ws2:longPathAware>true</ws2:longPathAware>
    </windowsSettings>
</application>

These are the directory management functions that no longer have MAX_PATH
restrictions if you opt-in to long path behavior:
CreateDirectoryW
CreateDirectoryExW
GetCurrentDirectoryW
RemoveDirectoryW
SetCurrentDirectoryW

These are the file management functions that no longer have MAX_PATH
restrictions if you opt-in to long path behavior:
CopyFileW,
CopyFile2,
CopyFileExW,
CreateFileW,
CreateFile2,
CreateHardLinkW,
CreateSymbolicLinkW,
DeleteFileW,
FindFirstFileW,
FindFirstFileExW,
FindNextFileW,
GetFileAttributesW,
GetFileAttributesExW,
SetFileAttributesW,
GetFullPathNameW,
GetLongPathNameW,
MoveFileW,
MoveFileExW,
MoveFileWithProgressW,
ReplaceFileW,
SearchPathW,
FindFirstFileNameW,
FindNextFileNameW,
FindFirstStreamW,
FindNextStreamW,
GetCompressedFileSizeW,
GetFinalPathNameByHandleW.
