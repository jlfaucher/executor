==========================================================================================

http://msdn.microsoft.com/en-us/library/aa289171.aspx

/GS enable security checks
When you compile with /GS, code is inserted to detect buffer overruns that may have overwritten the function's return address. A dialog warns the user and then the program is terminated.

/Ge force stack checking for all functions

/Gs[num]    control stack checking calls

/RTCc   convert to smaller type checks (MSDN detect assignments that result in data loss)
This option inserts code to alert you when an assignment results in data loss, so you can be sure that all the casts you make to smaller types never lose data

/RTCs   stack frame runtime checking
This option does several things that help to protect the stack from corruption.
Initialize all local variables to non-zero values each time the function is called. This prevents inadvertent use of values on the stack from previous calls.
Verify the stack pointer to check for corruption, such as that caused by defining a function as __stdcall in one place and __cdecl in another.
Detect overruns and underruns of local variables. This differs from /GS because it is available only in debug builds, and it detects corruption on either end of a buffer and for all buffers.

/RTCu   uninitialized local usage checks
This option warns when a variable is accessed without being initialized


=======================================================
Visual C++
Optimization options

http://msdn.microsoft.com/en-us/library/8f8h5cxt.aspx
    Creates the smallest code in the majority of cases.
    /O1 =  /Og /Os /Oy /Ob2 /Gs /GF /Gy

    Creates the fastest code in the majority of cases. (default setting for release builds)
    /O2 = /Og /Oi /Ot /Oy /Ob2 /Gs /GF /Gy

    Produces code that favors execution speed over smaller size.
    /Ox
        /Ob (Inline Function Expansion) , where the option parameter is 2 (/Ob2)
        /Og (Global Optimizations)
        /Oi (Generate Intrinsic Functions)
        /Ot (Favor Fast Code)
        /Oy (Frame-Pointer Omission)
    /Ox = /Og /Oi /Ot /Oy /Ob2

http://msdn.microsoft.com/en-us/library/k1ack8f1.aspx
    /O1 optimizes code for minimum size.
    /O2 optimizes code for maximum speed.
    /Ob controls inline function expansion.
    /Od disables optimization, speeding compilation and simplifying debugging.
    /Og enables global optimizations.
    /Oi generates intrinsic functions for appropriate function calls.
    /Os tells the compiler to favor optimizations for size over optimizations for speed.
    /Ot (a default setting) tells the compiler to favor optimizations for speed over optimizations for size.
    /Ox selects full optimization.
    /Oy suppresses the creation of frame pointers on the call stack for quicker function calls.
        The /Oy compiler option makes using the debugger more difficult
        because the compiler suppresses frame pointer information.
        If you specify a debug complier option (/Z7, /Zi, /ZI),
        we recommend that you specify the /Oy- option
        after any other optimization compiler options.

================================================================================
http://stackoverflow.com/questions/42308/tool-to-track-include-dependencies

here is GNUmake syntax to automatically 1) generate the dependency files, 2) keep them up to date, and 3) use them in your makefile:

.dep:
    mkdir $@
.dep/%.dep: %.c .dep
    (echo $@ \\; $(CC) $(IFLAGS) -MM $<) > $@ || (rm $@; false)
.dep/%.dep: %.cpp .dep
    (echo $@ \\; $(CXX) $(IFLAGS) -MM $<) > $@ || (rm $@; false)
DEPEND := $(patsubst %.dep,.dep/%.dep,$(OBJ:.o=.dep))
-include $(DEPEND)



cl option
/showIncludes


http://www.conifersystems.com/2008/10/09/dependencies-from-showincludes/
How to Get Dependencies from /showIncludes
(Python)
