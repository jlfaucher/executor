Introduction to Perl 6 Regex
https://github.com/perlpilot/perl6-docs/blob/master/intro/p6-regex-intro.pod

Regular Expression Flavor Comparison
http://www.regular-expressions.info/refflavors.html


https://news.ycombinator.com/item?id=27774584
    to your point (and how to fix it in a way that seemingly nobody does) - you
    can make complicated regular expressions pretty simple by using named groups,
    and ignoring pattern whitespace because they allow you to logically separate
    different components and specify intent.
    Some rare people can figure out:
    \d{1,2}[-/]\d{1,2}[-/](\d{4}|\d{2})
    but a dummy can figure out this:
    (?<month> \d{1,2} ) [-/] (?<day> \d{1,2} ) [-/] (?<year> \d{4} | \d{2} )

    Sub-expression or capture group: (foo)
    Named capture group: (?<name>foo)
    Non-capturing group: (?:foo)
    Lookahead: (?=foo)
    For negative lookahead, change = to !: (?!foo)
    For lookbehind, add <: (?<=foo)
    For negative lookbehind, change = to !: (?<!foo)


https://github.com/qntm/greenery
FSM/regex conversion library
Tools for parsing and manipulating regular expressions (greenery.lego),
for producing finite-state machines (greenery.fsm),
and for freely converting between the two. Python 3 only.
---
This project was undertaken because I wanted to be able to compute the
intersection between two regular expressions. The "intersection" is the set of
strings which both regexes will accept, represented as a third regular expression.
---
greenery works by converting both regexes to finite state machines, computing
the intersection of the two FSMs as a third FSM, and converting the third FSM back to a regex.


https://qntm.org/re
Learn regular expressions in about 55 minutes


Russ Cox's articles on regular expression theory and praxis:
- https://swtch.com/~rsc/regexp/regexp1.html
  Regular Expression Matching Can Be Simple And Fast
- https://swtch.com/~rsc/regexp/regexp2.html
  Regular Expression Matching: the Virtual Machine Approach
- https://swtch.com/~rsc/regexp/regexp3.html
  Regular Expression Matching in the Wild


https://github.com/kkos/oniguruma
regular expression library
This repository was archived by the owner on Apr 24, 2025.
---
Character encoding can be specified per regular expression object.


https://github.com/google/re2
RE2 is a fast, safe, thread-friendly alternative to backtracking regular
expression engines like those used in PCRE, Perl, and Python.
RE2 is developed by Google, and it's widely used in various Google products.
It is a C++ library.
Ruby bindings to RE2: https://github.com/mudge/re2


https://github.com/k-takata/Onigmo
Onigmo is a regular expressions library forked from Oniguruma.


https://serpapi.com/blog/faster-regular-expression-engines-in-ruby/
Fast(er) regular expression engines in Ruby
Performance-oriented comparison of alternative regexp engines that may
(or may not) speed up your Ruby code.
