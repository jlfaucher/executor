This file is not limited to co-routines. Also covers iterators, generators.

http://www.boost.org/doc/libs/1_53_0/libs/coroutine/doc/html/index.html

http://railsware.com/blog/2012/03/13/ruby-2-0-enumerablelazy/

http://www.cs.arizona.edu/icon/docs/ipd266.htm
Icon generators

http://www.icsi.berkeley.edu/~sather/Documentation/LanguageDescription/webmaker/DescriptionX2Eiterators-chapte-1.html#HEADING1-19
Sather iterators

http://www.python.org/dev/peps/pep-3152/	cofunctions

http://www.python.org/dev/peps/pep-0380/	Syntax for Delegating to a Subgenerator

http://codespeak.net/py/0.9.2/greenlet.html
Python

http://yinsochen.com/flapjax-functional-reactive-programming-in-javascrip/

http://flapjax-lang.org/

http://www.dabeaz.com/coroutines/


http://blog.jcoglan.com/2011/03/05/translation-from-haskell-to-javascript-of-selected-portions-of-the-best-introduction-to-monads-ive-ever-read/


https://github.com/harukizaemon/hamster
Hamster - Efficient, Immutable, Thread-Safe Collection classes for Ruby


http://paradigmatic.streum.org/2011/03/lazy-parallel-evaluation/

http://www.ruby-doc.org/core-1.9/classes/Fiber.html

http://www.infoq.com/news/2007/08/ruby-1-9-fibers

http://blade.nagaokaut.ac.jp/cgi-bin/scat.rb/ruby/ruby-core/11960

http://classparser.blogspot.com/

http://en.wikipedia.org/wiki/Coroutine#Coroutines_and_generators

http://en.wikipedia.org/wiki/Fiber_%28computer_science%29

http://msdn.microsoft.com/en-us/magazine/cc164086.aspx
Implementing Coroutines for .NET by Wrapping the Unmanaged Fiber API
Editor's Update - 9/16/2005:
The solution described in this article relies on undocumented functionality that is not supported by Microsoft at this time.
This article is intended for informational purposes only, and its contents should not be used to create production code.

http://www.crystalclearsoftware.com/soc/coroutine/coroutine/fibers.html


http://coco.luajit.org/index.html
Coco is a small extension to get True C Coroutine semantics for Lua 5.1.
True C coroutine semantics mean you can yield from a coroutine across a C call boundary
and resume back to it. Coco allows you to use a dedicated C stack for each coroutine.
Resuming a coroutine and yielding from a coroutine automatically switches C stacks.
